// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: byteplus/vod/request/request_vod.proto

package request

import (
	reflect "reflect"
	sync "sync"

	business "github.com/byteplus-sdk/byteplus-sdk-golang/service/vod/models/business"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **********************************************************************
// 播放
// **********************************************************************
type VodGetAllPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频ID
	Vids string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"`
	// 封装格式，支持 mp4、dash、hls、mp3、m4a、ogg。多个Format
	// 组成的字符串，中间用","隔开。默认获取全部
	Formats string `protobuf:"bytes,2,opt,name=Formats,proto3" json:"Formats,omitempty"`
	// 编码格式，支持 mp3、aac、opus、H264、H265、H266。多个Codec
	// 组成的字符串，中间用","隔开。默认获取全部
	Codecs string `protobuf:"bytes,3,opt,name=Codecs,proto3" json:"Codecs,omitempty"`
	// 视频流清晰度，默认返回全部，支持：240p，360p，480p，540p，720p，1080p。多个
	// Codec 组成的字符串，中间用","隔开。默认获取全部
	Definitions string `protobuf:"bytes,4,opt,name=Definitions,proto3" json:"Definitions,omitempty"`
	// 流文件类型。支持：video-视频流, audio-音频流。
	// 多个 FileType 组成的字符串，中间用","隔开。默认获取全部类型
	FileTypes string `protobuf:"bytes,5,opt,name=FileTypes,proto3" json:"FileTypes,omitempty"`
	// 水印贴片标签
	LogoTypes string `protobuf:"bytes,6,opt,name=LogoTypes,proto3" json:"LogoTypes,omitempty"`
	// 是否加密, 支持: "encrypt"-加密流, "normal"-非加密流, 默认返回全部
	NeedEncryptStream string `protobuf:"bytes,7,opt,name=NeedEncryptStream,proto3" json:"NeedEncryptStream,omitempty"`
	// 返回https播放地址，默认否, 1-是；0-否
	Ssl string `protobuf:"bytes,8,opt,name=Ssl,proto3" json:"Ssl,omitempty"`
	// 是否需要雪碧图（缩略图），默认否，1-是；0-否
	NeedThumbs string `protobuf:"bytes,9,opt,name=NeedThumbs,proto3" json:"NeedThumbs,omitempty"`
	// 是否需要蒙版弹幕，默认否，1-是；0-否
	NeedBarrageMask string `protobuf:"bytes,10,opt,name=NeedBarrageMask,proto3" json:"NeedBarrageMask,omitempty"`
	// 指定CDN类型, 默认不传为普通CDN, 若需使用请联系技术支持
	CdnType string `protobuf:"bytes,11,opt,name=CdnType,proto3" json:"CdnType,omitempty"`
	// 唯一性标识信息, 若需使用请联系技术支持
	UnionInfo string `protobuf:"bytes,12,opt,name=UnionInfo,proto3" json:"UnionInfo,omitempty"`
	// 播放场景，指定获取对应场景的音视频流。当前支持：preview-试看
	PlayScene string `protobuf:"bytes,13,opt,name=PlayScene,proto3" json:"PlayScene,omitempty"`
	// DRM过期时间戳, 若需使用请联系技术支持
	DrmExpireTimestamp string `protobuf:"bytes,14,opt,name=DrmExpireTimestamp,proto3" json:"DrmExpireTimestamp,omitempty"`
	// 默认获取全部。支持: "SDR", "PQHDR", "SLGHDR", 默认返回全部
	HDRType string `protobuf:"bytes,15,opt,name=HDRType,proto3" json:"HDRType,omitempty"`
	// 使用的帧对齐转码版本。支持: "1"-返回版本一, 默认不指定版本，全部返回
	KeyFrameAlignmentVersion string `protobuf:"bytes,16,opt,name=KeyFrameAlignmentVersion,proto3" json:"KeyFrameAlignmentVersion,omitempty"`
	// 发布状态, 支持: "Available"-发布, "NoAction"-未发布, 默认返回全部
	UserAction string `protobuf:"bytes,17,opt,name=UserAction,proto3" json:"UserAction,omitempty"`
	// 音频音质。当 FileType 为
	// audio时起作用，表示音频音质参数。支持：medium、higher、highest.默认返回所有音频流
	Quality string `protobuf:"bytes,18,opt,name=Quality,proto3" json:"Quality,omitempty"`
	// 强行指定本次请求的时间戳防盗链 单位秒
	ForceExpire string `protobuf:"bytes,19,opt,name=ForceExpire,proto3" json:"ForceExpire,omitempty"`
}

func (x *VodGetAllPlayInfoRequest) Reset() {
	*x = VodGetAllPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAllPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAllPlayInfoRequest) ProtoMessage() {}

func (x *VodGetAllPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAllPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetAllPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{0}
}

func (x *VodGetAllPlayInfoRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetFormats() string {
	if x != nil {
		return x.Formats
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetCodecs() string {
	if x != nil {
		return x.Codecs
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetDefinitions() string {
	if x != nil {
		return x.Definitions
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetFileTypes() string {
	if x != nil {
		return x.FileTypes
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetLogoTypes() string {
	if x != nil {
		return x.LogoTypes
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetNeedEncryptStream() string {
	if x != nil {
		return x.NeedEncryptStream
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetNeedThumbs() string {
	if x != nil {
		return x.NeedThumbs
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetNeedBarrageMask() string {
	if x != nil {
		return x.NeedBarrageMask
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetCdnType() string {
	if x != nil {
		return x.CdnType
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetUnionInfo() string {
	if x != nil {
		return x.UnionInfo
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetPlayScene() string {
	if x != nil {
		return x.PlayScene
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetDrmExpireTimestamp() string {
	if x != nil {
		return x.DrmExpireTimestamp
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetHDRType() string {
	if x != nil {
		return x.HDRType
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetKeyFrameAlignmentVersion() string {
	if x != nil {
		return x.KeyFrameAlignmentVersion
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetUserAction() string {
	if x != nil {
		return x.UserAction
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *VodGetAllPlayInfoRequest) GetForceExpire() string {
	if x != nil {
		return x.ForceExpire
	}
	return ""
}

type VodGetPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频ID
	Vid string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`
	// 封装格式，支持 mp4、dash、hls、mp3、m4a、ogg, 默认mp4
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`
	// 编码格式，支持 mp3、aac、opus、H264、H265、H266, 视频默认H264，音频默认aac
	Codec string `protobuf:"bytes,3,opt,name=Codec,proto3" json:"Codec,omitempty"`
	// 视频流清晰度，支持：240p,360p,480p,540p,720p,1080p,2k,4k,od,oe.默认返回全部
	Definition string `protobuf:"bytes,4,opt,name=Definition,proto3" json:"Definition,omitempty"`
	// 流文件类型,支持:
	// 加密视频流evideo，加密音频流传eaudio,非加密视频流video,普通音频音频流audio.默认video
	FileType string `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	// 水印贴片标签
	LogoType string `protobuf:"bytes,6,opt,name=LogoType,proto3" json:"LogoType,omitempty"`
	// 播放地址是否base64编码，默认否，支持设置： 0-否，1-是
	Base64 string `protobuf:"bytes,7,opt,name=Base64,proto3" json:"Base64,omitempty"`
	// 返回https播放地址，默认否, 1-是；0-否
	Ssl string `protobuf:"bytes,8,opt,name=Ssl,proto3" json:"Ssl,omitempty"`
	// 是否需要雪碧图（缩略图），默认否，1-是；0-否
	NeedThumbs string `protobuf:"bytes,9,opt,name=NeedThumbs,proto3" json:"NeedThumbs,omitempty"`
	// 是否需要蒙版弹幕，默认否，1-是；0-否
	NeedBarrageMask string `protobuf:"bytes,10,opt,name=NeedBarrageMask,proto3" json:"NeedBarrageMask,omitempty"`
	// 指定CDN类型, 默认不传为普通CDN, 若需使用请联系技术支持
	CdnType string `protobuf:"bytes,11,opt,name=CdnType,proto3" json:"CdnType,omitempty"`
	// 唯一性标识信息, 若需使用请联系技术支持
	UnionInfo string `protobuf:"bytes,12,opt,name=UnionInfo,proto3" json:"UnionInfo,omitempty"`
	// HDR清晰度，默认不查询，支持：all, 240p, 360p, 420p, 480p, 540p, 720p,
	// 1080p, 2k, 4k
	HDRDefinition string `protobuf:"bytes,13,opt,name=HDRDefinition,proto3" json:"HDRDefinition,omitempty"`
	// 播放场景，指定获取对应场景的音视频流。当前支持：preview-试看
	PlayScene string `protobuf:"bytes,14,opt,name=PlayScene,proto3" json:"PlayScene,omitempty"`
	// DRM过期时间戳, 若需使用请联系技术支持
	DrmExpireTimestamp string `protobuf:"bytes,15,opt,name=DrmExpireTimestamp,proto3" json:"DrmExpireTimestamp,omitempty"`
	// 音频音质。当FileType为audio和eaudio时起作用,表示音频音质参数.支持: medium,
	// higher, highest.默认返回所有音频流
	Quality string `protobuf:"bytes,16,opt,name=Quality,proto3" json:"Quality,omitempty"`
	// 播放配置,可指定播放域名
	PlayConfig string `protobuf:"bytes,17,opt,name=PlayConfig,proto3" json:"PlayConfig,omitempty"`
	// 强行指定本次请求的时间戳防盗链 单位秒
	ForceExpire string `protobuf:"bytes,18,opt,name=ForceExpire,proto3" json:"ForceExpire,omitempty"`
	// format=dash时,指定下发video model还是mpd文件
	DashMode string `protobuf:"bytes,19,opt,name=DashMode,proto3" json:"DashMode,omitempty"`
	// 客户端生成 私有Drm加密 用于加密密钥明文,unionInfo,DrmExpireTImestamp
	DrmKEK string `protobuf:"bytes,20,opt,name=DrmKEK,proto3" json:"DrmKEK,omitempty"`
	// 用于标识请求来自于web播放器 "1"表示web播放器
	JSPlayer string `protobuf:"bytes,21,opt,name=JSPlayer,proto3" json:"JSPlayer,omitempty"`
}

func (x *VodGetPlayInfoRequest) Reset() {
	*x = VodGetPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoRequest) ProtoMessage() {}

func (x *VodGetPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{1}
}

func (x *VodGetPlayInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetNeedThumbs() string {
	if x != nil {
		return x.NeedThumbs
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetNeedBarrageMask() string {
	if x != nil {
		return x.NeedBarrageMask
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetCdnType() string {
	if x != nil {
		return x.CdnType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetUnionInfo() string {
	if x != nil {
		return x.UnionInfo
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetHDRDefinition() string {
	if x != nil {
		return x.HDRDefinition
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetPlayScene() string {
	if x != nil {
		return x.PlayScene
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDrmExpireTimestamp() string {
	if x != nil {
		return x.DrmExpireTimestamp
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetPlayConfig() string {
	if x != nil {
		return x.PlayConfig
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetForceExpire() string {
	if x != nil {
		return x.ForceExpire
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDashMode() string {
	if x != nil {
		return x.DashMode
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDrmKEK() string {
	if x != nil {
		return x.DrmKEK
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetJSPlayer() string {
	if x != nil {
		return x.JSPlayer
	}
	return ""
}

type VodGetPrivateDrmPlayAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// drm类型，支持web,app。默认web
	DrmType string `protobuf:"bytes,1,opt,name=DrmType,proto3" json:"DrmType,omitempty"`
	// 视频id
	Vid string `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`
	// 播放许可id列表，以逗号分割
	PlayAuthIds string `protobuf:"bytes,3,opt,name=PlayAuthIds,proto3" json:"PlayAuthIds,omitempty"`
	// 唯一性标识信息, 若需使用请联系技术支持
	UnionInfo string `protobuf:"bytes,4,opt,name=UnionInfo,proto3" json:"UnionInfo,omitempty"`
}

func (x *VodGetPrivateDrmPlayAuthRequest) Reset() {
	*x = VodGetPrivateDrmPlayAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPrivateDrmPlayAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPrivateDrmPlayAuthRequest) ProtoMessage() {}

func (x *VodGetPrivateDrmPlayAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPrivateDrmPlayAuthRequest.ProtoReflect.Descriptor instead.
func (*VodGetPrivateDrmPlayAuthRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{2}
}

func (x *VodGetPrivateDrmPlayAuthRequest) GetDrmType() string {
	if x != nil {
		return x.DrmType
	}
	return ""
}

func (x *VodGetPrivateDrmPlayAuthRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetPrivateDrmPlayAuthRequest) GetPlayAuthIds() string {
	if x != nil {
		return x.PlayAuthIds
	}
	return ""
}

func (x *VodGetPrivateDrmPlayAuthRequest) GetUnionInfo() string {
	if x != nil {
		return x.UnionInfo
	}
	return ""
}

type VodGetHlsDecryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Drm鉴权Token
	DrmAuthToken string `protobuf:"bytes,1,opt,name=DrmAuthToken,proto3" json:"DrmAuthToken,omitempty"`
	// 加密hls的访问Key,从m3u8文件中取到
	Ak string `protobuf:"bytes,2,opt,name=Ak,proto3" json:"Ak,omitempty"`
	// Drm鉴权数据源,从m3u8文件中取到
	Source string `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *VodGetHlsDecryptionKeyRequest) Reset() {
	*x = VodGetHlsDecryptionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetHlsDecryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetHlsDecryptionKeyRequest) ProtoMessage() {}

func (x *VodGetHlsDecryptionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetHlsDecryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*VodGetHlsDecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{3}
}

func (x *VodGetHlsDecryptionKeyRequest) GetDrmAuthToken() string {
	if x != nil {
		return x.DrmAuthToken
	}
	return ""
}

func (x *VodGetHlsDecryptionKeyRequest) GetAk() string {
	if x != nil {
		return x.Ak
	}
	return ""
}

func (x *VodGetHlsDecryptionKeyRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type VodCreateHlsDecryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodCreateHlsDecryptionKeyRequest) Reset() {
	*x = VodCreateHlsDecryptionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateHlsDecryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateHlsDecryptionKeyRequest) ProtoMessage() {}

func (x *VodCreateHlsDecryptionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateHlsDecryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*VodCreateHlsDecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{4}
}

func (x *VodCreateHlsDecryptionKeyRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodGetPlayInfoWithLiveTimeShiftSceneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 播放URI列表,多个uri之间使用“,”分隔
	StoreUris string `protobuf:"bytes,1,opt,name=StoreUris,proto3" json:"StoreUris,omitempty"`
	// 空间名称
	SpaceName string `protobuf:"bytes,2,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 返回https播放地址，默认否, 1-是；0-否
	Ssl string `protobuf:"bytes,3,opt,name=Ssl,proto3" json:"Ssl,omitempty"`
	// 过期时间戳：毫秒。若不传，则为当前时间+1小时
	ExpireTimestamp string `protobuf:"bytes,4,opt,name=ExpireTimestamp,proto3" json:"ExpireTimestamp,omitempty"`
	// 生成地址时填充BucketName，默认否, 1-是；0-否
	NeedComposeBucketName string `protobuf:"bytes,5,opt,name=NeedComposeBucketName,proto3" json:"NeedComposeBucketName,omitempty"`
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) Reset() {
	*x = VodGetPlayInfoWithLiveTimeShiftSceneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoWithLiveTimeShiftSceneRequest) ProtoMessage() {}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoWithLiveTimeShiftSceneRequest.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoWithLiveTimeShiftSceneRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{5}
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) GetStoreUris() string {
	if x != nil {
		return x.StoreUris
	}
	return ""
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) GetExpireTimestamp() string {
	if x != nil {
		return x.ExpireTimestamp
	}
	return ""
}

func (x *VodGetPlayInfoWithLiveTimeShiftSceneRequest) GetNeedComposeBucketName() string {
	if x != nil {
		return x.NeedComposeBucketName
	}
	return ""
}

type VodUrlUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传URL设置参数集合，每个URL入参的设置均在此设置
	URLSets []*business.VodUrlUploadURLSet `protobuf:"bytes,2,rep,name=URLSets,proto3" json:"URLSets,omitempty"`
}

func (x *VodUrlUploadRequest) Reset() {
	*x = VodUrlUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUrlUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUrlUploadRequest) ProtoMessage() {}

func (x *VodUrlUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUrlUploadRequest.ProtoReflect.Descriptor instead.
func (*VodUrlUploadRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{6}
}

func (x *VodUrlUploadRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUrlUploadRequest) GetURLSets() []*business.VodUrlUploadURLSet {
	if x != nil {
		return x.URLSets
	}
	return nil
}

type VodQueryUploadTaskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务ID列表，通过任务ID可以查询任务的状态
	JobIds string `protobuf:"bytes,1,opt,name=JobIds,proto3" json:"JobIds,omitempty"`
}

func (x *VodQueryUploadTaskInfoRequest) Reset() {
	*x = VodQueryUploadTaskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodQueryUploadTaskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodQueryUploadTaskInfoRequest) ProtoMessage() {}

func (x *VodQueryUploadTaskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodQueryUploadTaskInfoRequest.ProtoReflect.Descriptor instead.
func (*VodQueryUploadTaskInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{7}
}

func (x *VodQueryUploadTaskInfoRequest) GetJobIds() string {
	if x != nil {
		return x.JobIds
	}
	return ""
}

type VodApplyUploadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传重试时可选择带上的 Session 信息，作为下发参数的辅助信息
	SessionKey string `protobuf:"bytes,2,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
	// 上传的文件大小，单位为字节，非必填参数
	FileSize float64 `protobuf:"fixed64,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	// 上传的类型，可不填，默认为 media
	FileType string `protobuf:"bytes,4,opt,name=FileType,proto3" json:"FileType,omitempty"`
	// 上传的文件在存储中的名字，即 bucket/key 中的 key
	FileName string `protobuf:"bytes,5,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// 上传的文件的存储类型，1-标准存储，2-归档存储，非必填参数，默认为标准存储
	StorageClass int32 `protobuf:"varint,6,opt,name=StorageClass,proto3" json:"StorageClass,omitempty"`
	// 上传中文件的文件后缀
	FileExtension string `protobuf:"bytes,7,opt,name=FileExtension,proto3" json:"FileExtension,omitempty"`
}

func (x *VodApplyUploadInfoRequest) Reset() {
	*x = VodApplyUploadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodApplyUploadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodApplyUploadInfoRequest) ProtoMessage() {}

func (x *VodApplyUploadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodApplyUploadInfoRequest.ProtoReflect.Descriptor instead.
func (*VodApplyUploadInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{8}
}

func (x *VodApplyUploadInfoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodApplyUploadInfoRequest) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *VodApplyUploadInfoRequest) GetFileSize() float64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VodApplyUploadInfoRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodApplyUploadInfoRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VodApplyUploadInfoRequest) GetStorageClass() int32 {
	if x != nil {
		return x.StorageClass
	}
	return 0
}

func (x *VodApplyUploadInfoRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

type VodUploadMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传文件的路径
	FilePath string `protobuf:"bytes,2,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	// 业务希望上传透传的信息，会在上传成功时返回给用户
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	// 上传的功能函数
	Functions string `protobuf:"bytes,4,opt,name=Functions,proto3" json:"Functions,omitempty"`
	// 上传的文件在存储中的名字，即 bucket/key 中的 key
	FileName string `protobuf:"bytes,5,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// 上传的文件的存储类型，1-标准存储，2-归档存储，非必填参数，默认为标准存储
	StorageClass int32 `protobuf:"varint,6,opt,name=StorageClass,proto3" json:"StorageClass,omitempty"`
	// 上传中文件的文件后缀
	FileExtension string `protobuf:"bytes,7,opt,name=FileExtension,proto3" json:"FileExtension,omitempty"`
	// 上传中文件的来源
	VodUploadSource string `protobuf:"bytes,8,opt,name=VodUploadSource,proto3" json:"VodUploadSource,omitempty"`
}

func (x *VodUploadMediaRequest) Reset() {
	*x = VodUploadMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUploadMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUploadMediaRequest) ProtoMessage() {}

func (x *VodUploadMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUploadMediaRequest.ProtoReflect.Descriptor instead.
func (*VodUploadMediaRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{9}
}

func (x *VodUploadMediaRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUploadMediaRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *VodUploadMediaRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodUploadMediaRequest) GetFunctions() string {
	if x != nil {
		return x.Functions
	}
	return ""
}

func (x *VodUploadMediaRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VodUploadMediaRequest) GetStorageClass() int32 {
	if x != nil {
		return x.StorageClass
	}
	return 0
}

func (x *VodUploadMediaRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *VodUploadMediaRequest) GetVodUploadSource() string {
	if x != nil {
		return x.VodUploadSource
	}
	return ""
}

type VodUploadMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传文件的路径
	FilePath string `protobuf:"bytes,2,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	// 业务希望上传透传的信息，会在上传成功时返回给用户
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	// 上传的功能函数
	Functions string `protobuf:"bytes,4,opt,name=Functions,proto3" json:"Functions,omitempty"`
	// 上传的类型，media、image、object 默认为 media
	FileType string `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	// 上传的文件在存储中的名字，即 bucket/key 中的 key
	FileName string `protobuf:"bytes,6,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// 上传中文件的文件后缀
	FileExtension string `protobuf:"bytes,7,opt,name=FileExtension,proto3" json:"FileExtension,omitempty"`
}

func (x *VodUploadMaterialRequest) Reset() {
	*x = VodUploadMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUploadMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUploadMaterialRequest) ProtoMessage() {}

func (x *VodUploadMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUploadMaterialRequest.ProtoReflect.Descriptor instead.
func (*VodUploadMaterialRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{10}
}

func (x *VodUploadMaterialRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetFunctions() string {
	if x != nil {
		return x.Functions
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VodUploadMaterialRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

type VodCommitUploadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传 1005 阶段需要带上 1001 的 Session
	SessionKey string `protobuf:"bytes,2,opt,name=SessionKey,proto3" json:"SessionKey,omitempty"`
	// 业务希望上传透传的信息，会在上传成功时返回给用户
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	// 上传的功能函数
	Functions string `protobuf:"bytes,4,opt,name=Functions,proto3" json:"Functions,omitempty"`
	// 上传中文件的来源
	VodUploadSource string `protobuf:"bytes,5,opt,name=VodUploadSource,proto3" json:"VodUploadSource,omitempty"`
}

func (x *VodCommitUploadInfoRequest) Reset() {
	*x = VodCommitUploadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCommitUploadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCommitUploadInfoRequest) ProtoMessage() {}

func (x *VodCommitUploadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCommitUploadInfoRequest.ProtoReflect.Descriptor instead.
func (*VodCommitUploadInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{11}
}

func (x *VodCommitUploadInfoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCommitUploadInfoRequest) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *VodCommitUploadInfoRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodCommitUploadInfoRequest) GetFunctions() string {
	if x != nil {
		return x.Functions
	}
	return ""
}

func (x *VodCommitUploadInfoRequest) GetVodUploadSource() string {
	if x != nil {
		return x.VodUploadSource
	}
	return ""
}

type VodUrlUploadJsonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上传的空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 上传URL设置参数集合，每个URL入参的设置均在此设置
	URLSets string `protobuf:"bytes,2,opt,name=URLSets,proto3" json:"URLSets,omitempty"`
}

func (x *VodUrlUploadJsonRequest) Reset() {
	*x = VodUrlUploadJsonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUrlUploadJsonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUrlUploadJsonRequest) ProtoMessage() {}

func (x *VodUrlUploadJsonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUrlUploadJsonRequest.ProtoReflect.Descriptor instead.
func (*VodUrlUploadJsonRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{12}
}

func (x *VodUrlUploadJsonRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUrlUploadJsonRequest) GetURLSets() string {
	if x != nil {
		return x.URLSets
	}
	return ""
}

type VodGetRecommendedPosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"` //视频ID列表
}

func (x *VodGetRecommendedPosterRequest) Reset() {
	*x = VodGetRecommendedPosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetRecommendedPosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetRecommendedPosterRequest) ProtoMessage() {}

func (x *VodGetRecommendedPosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetRecommendedPosterRequest.ProtoReflect.Descriptor instead.
func (*VodGetRecommendedPosterRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{13}
}

func (x *VodGetRecommendedPosterRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type VodUpdateMediaPublishStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid    string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`       //视频ID
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"` //视频发布状态
}

func (x *VodUpdateMediaPublishStatusRequest) Reset() {
	*x = VodUpdateMediaPublishStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateMediaPublishStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateMediaPublishStatusRequest) ProtoMessage() {}

func (x *VodUpdateMediaPublishStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateMediaPublishStatusRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateMediaPublishStatusRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{14}
}

func (x *VodUpdateMediaPublishStatusRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodUpdateMediaPublishStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type VodUpdateMediaStorageClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids         string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"`                 //视频ID列表,多个用英文逗号分隔，最多支持20个
	StorageClass string `protobuf:"bytes,2,opt,name=StorageClass,proto3" json:"StorageClass,omitempty"` //文件存储类型，STANDARD-标准存储，ARCHIVE-归档存储
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"` //回调回传参数
	FileIds      string `protobuf:"bytes,4,opt,name=FileIds,proto3" json:"FileIds,omitempty"`           //转码视频ID列表,多个用英文逗号分隔，最多支持20个，传入该参数时，Vids只允许传一个视频ID
}

func (x *VodUpdateMediaStorageClassRequest) Reset() {
	*x = VodUpdateMediaStorageClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateMediaStorageClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateMediaStorageClassRequest) ProtoMessage() {}

func (x *VodUpdateMediaStorageClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateMediaStorageClassRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateMediaStorageClassRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{15}
}

func (x *VodUpdateMediaStorageClassRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

func (x *VodUpdateMediaStorageClassRequest) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *VodUpdateMediaStorageClassRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodUpdateMediaStorageClassRequest) GetFileIds() string {
	if x != nil {
		return x.FileIds
	}
	return ""
}

type VodUpdateMediaInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid              string                  `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                           //视频ID
	PosterUri        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=PosterUri,proto3" json:"PosterUri,omitempty"`               //视频封面Uri
	Title            *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                       //视频名称
	Description      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`           //视频描述
	Tags             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=Tags,proto3" json:"Tags,omitempty"`                         //视频标签
	ClassificationId *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"` //视频分类Id
}

func (x *VodUpdateMediaInfoRequest) Reset() {
	*x = VodUpdateMediaInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateMediaInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateMediaInfoRequest) ProtoMessage() {}

func (x *VodUpdateMediaInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateMediaInfoRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateMediaInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{16}
}

func (x *VodUpdateMediaInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodUpdateMediaInfoRequest) GetPosterUri() *wrapperspb.StringValue {
	if x != nil {
		return x.PosterUri
	}
	return nil
}

func (x *VodUpdateMediaInfoRequest) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *VodUpdateMediaInfoRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *VodUpdateMediaInfoRequest) GetTags() *wrapperspb.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VodUpdateMediaInfoRequest) GetClassificationId() *wrapperspb.Int64Value {
	if x != nil {
		return x.ClassificationId
	}
	return nil
}

type VodGetMediaInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"` //视频ID列表
}

func (x *VodGetMediaInfosRequest) Reset() {
	*x = VodGetMediaInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetMediaInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetMediaInfosRequest) ProtoMessage() {}

func (x *VodGetMediaInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetMediaInfosRequest.ProtoReflect.Descriptor instead.
func (*VodGetMediaInfosRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{17}
}

func (x *VodGetMediaInfosRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type VodDeleteMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids         string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"`                 //视频ID列表
	CallbackArgs string `protobuf:"bytes,2,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"` //回调回传参数
}

func (x *VodDeleteMediaRequest) Reset() {
	*x = VodDeleteMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteMediaRequest) ProtoMessage() {}

func (x *VodDeleteMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteMediaRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteMediaRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{18}
}

func (x *VodDeleteMediaRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

func (x *VodDeleteMediaRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

type VodDeleteTranscodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid          string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                   //视频ID
	FileIds      string `protobuf:"bytes,2,opt,name=FileIds,proto3" json:"FileIds,omitempty"`           //转码视频ID列表
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"` //回调回传参数
}

func (x *VodDeleteTranscodesRequest) Reset() {
	*x = VodDeleteTranscodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteTranscodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteTranscodesRequest) ProtoMessage() {}

func (x *VodDeleteTranscodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteTranscodesRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteTranscodesRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{19}
}

func (x *VodDeleteTranscodesRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodDeleteTranscodesRequest) GetFileIds() string {
	if x != nil {
		return x.FileIds
	}
	return ""
}

func (x *VodDeleteTranscodesRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

type VodGetMediaListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                  //空间名
	Vid               string `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                              //视频ID
	Status            string `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`                        //视频状态
	Order             string `protobuf:"bytes,4,opt,name=Order,proto3" json:"Order,omitempty"`                          //排序规则
	Tags              string `protobuf:"bytes,5,opt,name=Tags,proto3" json:"Tags,omitempty"`                            //标签，多个用","隔开
	StartTime         string `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                  //查询时间范围下限
	EndTime           string `protobuf:"bytes,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                      //查询时间范围上限
	Offset            string `protobuf:"bytes,8,opt,name=Offset,proto3" json:"Offset,omitempty"`                        //数据偏移量
	PageSize          string `protobuf:"bytes,9,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                    //分页大小
	ClassificationIds string `protobuf:"bytes,10,opt,name=ClassificationIds,proto3" json:"ClassificationIds,omitempty"` //分类id列表
	TosStorageClasses string `protobuf:"bytes,11,opt,name=TosStorageClasses,proto3" json:"TosStorageClasses,omitempty"` // tos存储类型(Standard, Archive)，多个用","隔开
	VodUploadSources  string `protobuf:"bytes,12,opt,name=VodUploadSources,proto3" json:"VodUploadSources,omitempty"`   // 音视频上传来源，多个用","隔开
}

func (x *VodGetMediaListRequest) Reset() {
	*x = VodGetMediaListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetMediaListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetMediaListRequest) ProtoMessage() {}

func (x *VodGetMediaListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetMediaListRequest.ProtoReflect.Descriptor instead.
func (*VodGetMediaListRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{20}
}

func (x *VodGetMediaListRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetMediaListRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetMediaListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodGetMediaListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *VodGetMediaListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *VodGetMediaListRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodGetMediaListRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodGetMediaListRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *VodGetMediaListRequest) GetPageSize() string {
	if x != nil {
		return x.PageSize
	}
	return ""
}

func (x *VodGetMediaListRequest) GetClassificationIds() string {
	if x != nil {
		return x.ClassificationIds
	}
	return ""
}

func (x *VodGetMediaListRequest) GetTosStorageClasses() string {
	if x != nil {
		return x.TosStorageClasses
	}
	return ""
}

func (x *VodGetMediaListRequest) GetVodUploadSources() string {
	if x != nil {
		return x.VodUploadSources
	}
	return ""
}

type VodGetSubtitleInfoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid         string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                 //视频ID
	FileIds     string `protobuf:"bytes,2,opt,name=FileIds,proto3" json:"FileIds,omitempty"`         //转码视频id列表，多个用","隔开
	Languages   string `protobuf:"bytes,3,opt,name=Languages,proto3" json:"Languages,omitempty"`     //字幕语言列表，多个用","隔开
	Formats     string `protobuf:"bytes,4,opt,name=Formats,proto3" json:"Formats,omitempty"`         //字幕格式列表，多个用","隔开
	LanguageIds string `protobuf:"bytes,5,opt,name=LanguageIds,proto3" json:"LanguageIds,omitempty"` //字幕语言Id列表，多个用","隔开
	SubtitleIds string `protobuf:"bytes,6,opt,name=SubtitleIds,proto3" json:"SubtitleIds,omitempty"` //字幕Id列表，多个用","隔开
	Status      string `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`           //状态，多个用","隔开
	Title       string `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title,omitempty"`             //标题
	Tag         string `protobuf:"bytes,9,opt,name=Tag,proto3" json:"Tag,omitempty"`                 //标签
	Offset      string `protobuf:"bytes,10,opt,name=Offset,proto3" json:"Offset,omitempty"`          // file的偏移量
	PageSize    string `protobuf:"bytes,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`      //分页大小（结果一fileId分页）
	Ssl         string `protobuf:"bytes,12,opt,name=Ssl,proto3" json:"Ssl,omitempty"`                //返回https播放地址，默认否, 1-是；0-否
}

func (x *VodGetSubtitleInfoListRequest) Reset() {
	*x = VodGetSubtitleInfoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetSubtitleInfoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetSubtitleInfoListRequest) ProtoMessage() {}

func (x *VodGetSubtitleInfoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetSubtitleInfoListRequest.ProtoReflect.Descriptor instead.
func (*VodGetSubtitleInfoListRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{21}
}

func (x *VodGetSubtitleInfoListRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetFileIds() string {
	if x != nil {
		return x.FileIds
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetLanguages() string {
	if x != nil {
		return x.Languages
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetFormats() string {
	if x != nil {
		return x.Formats
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetLanguageIds() string {
	if x != nil {
		return x.LanguageIds
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetSubtitleIds() string {
	if x != nil {
		return x.SubtitleIds
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetPageSize() string {
	if x != nil {
		return x.PageSize
	}
	return ""
}

func (x *VodGetSubtitleInfoListRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type VodUpdateSubtitleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`             //视频ID
	FileIds   string `protobuf:"bytes,2,opt,name=FileIds,proto3" json:"FileIds,omitempty"`     //转码视频id列表，多个用","隔开
	Languages string `protobuf:"bytes,3,opt,name=Languages,proto3" json:"Languages,omitempty"` //字幕语言列表，多个用","隔开
	Formats   string `protobuf:"bytes,4,opt,name=Formats,proto3" json:"Formats,omitempty"`     //字幕格式列表，多个用","隔开
	Status    string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`       //状态
}

func (x *VodUpdateSubtitleStatusRequest) Reset() {
	*x = VodUpdateSubtitleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateSubtitleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateSubtitleStatusRequest) ProtoMessage() {}

func (x *VodUpdateSubtitleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateSubtitleStatusRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateSubtitleStatusRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{22}
}

func (x *VodUpdateSubtitleStatusRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodUpdateSubtitleStatusRequest) GetFileIds() string {
	if x != nil {
		return x.FileIds
	}
	return ""
}

func (x *VodUpdateSubtitleStatusRequest) GetLanguages() string {
	if x != nil {
		return x.Languages
	}
	return ""
}

func (x *VodUpdateSubtitleStatusRequest) GetFormats() string {
	if x != nil {
		return x.Formats
	}
	return ""
}

func (x *VodUpdateSubtitleStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type VodUpdateSubtitleInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid      string                  `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`           //视频ID
	FileId   string                  `protobuf:"bytes,2,opt,name=FileId,proto3" json:"FileId,omitempty"`     //转码视频id列表
	Language string                  `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"` //字幕语言列表
	Format   string                  `protobuf:"bytes,4,opt,name=Format,proto3" json:"Format,omitempty"`     //字幕格式列表
	Title    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`       //标题
	Tag      *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=Tag,proto3" json:"Tag,omitempty"`           //标签
}

func (x *VodUpdateSubtitleInfoRequest) Reset() {
	*x = VodUpdateSubtitleInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateSubtitleInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateSubtitleInfoRequest) ProtoMessage() {}

func (x *VodUpdateSubtitleInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateSubtitleInfoRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateSubtitleInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{23}
}

func (x *VodUpdateSubtitleInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodUpdateSubtitleInfoRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VodUpdateSubtitleInfoRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VodUpdateSubtitleInfoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodUpdateSubtitleInfoRequest) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *VodUpdateSubtitleInfoRequest) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

type VodGetAuditFramesForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid               string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                             //视频ID
	Strategy          string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"`                   //审核帧模板信息中的Strategy，抽帧策略
	MinNumberOfFrames string `protobuf:"bytes,3,opt,name=MinNumberOfFrames,proto3" json:"MinNumberOfFrames,omitempty"` //最小帧数，未设置时以服务配置默认值为准
	MaxNumberOfFrames string `protobuf:"bytes,4,opt,name=MaxNumberOfFrames,proto3" json:"MaxNumberOfFrames,omitempty"` //最大帧数，未设置时以服务配置默认值为准
}

func (x *VodGetAuditFramesForAuditRequest) Reset() {
	*x = VodGetAuditFramesForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAuditFramesForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAuditFramesForAuditRequest) ProtoMessage() {}

func (x *VodGetAuditFramesForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAuditFramesForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetAuditFramesForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{24}
}

func (x *VodGetAuditFramesForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetAuditFramesForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *VodGetAuditFramesForAuditRequest) GetMinNumberOfFrames() string {
	if x != nil {
		return x.MinNumberOfFrames
	}
	return ""
}

func (x *VodGetAuditFramesForAuditRequest) GetMaxNumberOfFrames() string {
	if x != nil {
		return x.MaxNumberOfFrames
	}
	return ""
}

type VodGetMLFramesForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid               string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                              //视频ID
	Strategy          string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"`                    //审核帧模板信息中的Strategy，抽帧策略
	FrameOpt          string `protobuf:"bytes,3,opt,name=FrameOpt,proto3" json:"FrameOpt,omitempty"`                    //抽帧方式,参考VodFrameExtractingOptionForAudit
	FrameFps          string `protobuf:"bytes,4,opt,name=FrameFps,proto3" json:"FrameFps,omitempty"`                    //抽帧方式选择Fps或FpsLimitNumberOfFrames时生效,表示抽帧的帧率,生效时需要保证大于0
	NumberOfFrames    string `protobuf:"bytes,5,opt,name=NumberOfFrames,proto3" json:"NumberOfFrames,omitempty"`        //抽帧方式选择NumberOfFrames时生效,表示需要多少帧,生效时需要保证大于0
	CutTimeMills      string `protobuf:"bytes,6,opt,name=CutTimeMills,proto3" json:"CutTimeMills,omitempty"`            //抽帧方式选择CutTimes时生效,逗号分割,表示需要获取的帧的时间戳(ms)列表，生效时需要保证数组不为空
	NeedFirstFrame    string `protobuf:"bytes,7,opt,name=NeedFirstFrame,proto3" json:"NeedFirstFrame,omitempty"`        //需要首帧, 默认0，支持设置： 0-否，1-是
	NeedLastFrame     string `protobuf:"bytes,8,opt,name=NeedLastFrame,proto3" json:"NeedLastFrame,omitempty"`          //需要尾帧, 默认0，支持设置： 0-否，1-是
	StartTimeMill     string `protobuf:"bytes,9,opt,name=StartTimeMill,proto3" json:"StartTimeMill,omitempty"`          //从视频的第几秒开始抽帧，单位:ms
	EndTimeMill       string `protobuf:"bytes,10,opt,name=EndTimeMill,proto3" json:"EndTimeMill,omitempty"`             //从视频的第几秒结束抽帧，单位:ms
	MinNumberOfFrames string `protobuf:"bytes,11,opt,name=MinNumberOfFrames,proto3" json:"MinNumberOfFrames,omitempty"` //抽帧方式选择FpsLimitNumberOfFrames时生效,表示限制的最小帧数,为0表示不限制
	MaxNumberOfFrames string `protobuf:"bytes,12,opt,name=MaxNumberOfFrames,proto3" json:"MaxNumberOfFrames,omitempty"` //抽帧方式选择FpsLimitNumberOfFrames时生效,表示限制的最大帧数,为0表示不限制
}

func (x *VodGetMLFramesForAuditRequest) Reset() {
	*x = VodGetMLFramesForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetMLFramesForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetMLFramesForAuditRequest) ProtoMessage() {}

func (x *VodGetMLFramesForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetMLFramesForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetMLFramesForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{25}
}

func (x *VodGetMLFramesForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetFrameOpt() string {
	if x != nil {
		return x.FrameOpt
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetFrameFps() string {
	if x != nil {
		return x.FrameFps
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetNumberOfFrames() string {
	if x != nil {
		return x.NumberOfFrames
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetCutTimeMills() string {
	if x != nil {
		return x.CutTimeMills
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetNeedFirstFrame() string {
	if x != nil {
		return x.NeedFirstFrame
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetNeedLastFrame() string {
	if x != nil {
		return x.NeedLastFrame
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetStartTimeMill() string {
	if x != nil {
		return x.StartTimeMill
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetEndTimeMill() string {
	if x != nil {
		return x.EndTimeMill
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetMinNumberOfFrames() string {
	if x != nil {
		return x.MinNumberOfFrames
	}
	return ""
}

func (x *VodGetMLFramesForAuditRequest) GetMaxNumberOfFrames() string {
	if x != nil {
		return x.MaxNumberOfFrames
	}
	return ""
}

type VodGetBetterFramesForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`             // Vid
	Strategy  string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"`   //视频审核帧模板中的Strategy，抽帧策略，默认为default
	CoverRate string `protobuf:"bytes,3,opt,name=CoverRate,proto3" json:"CoverRate,omitempty"` // 优选帧的覆盖率得分，取值为从0至1的小数，0代表取全部优选帧
}

func (x *VodGetBetterFramesForAuditRequest) Reset() {
	*x = VodGetBetterFramesForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetBetterFramesForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetBetterFramesForAuditRequest) ProtoMessage() {}

func (x *VodGetBetterFramesForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetBetterFramesForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetBetterFramesForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{26}
}

func (x *VodGetBetterFramesForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetBetterFramesForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *VodGetBetterFramesForAuditRequest) GetCoverRate() string {
	if x != nil {
		return x.CoverRate
	}
	return ""
}

type VodGetAudioInfoForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid      string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`           // vid
	Strategy string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"` //音频审核帧模板中的Strategy，抽帧策略
}

func (x *VodGetAudioInfoForAuditRequest) Reset() {
	*x = VodGetAudioInfoForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAudioInfoForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAudioInfoForAuditRequest) ProtoMessage() {}

func (x *VodGetAudioInfoForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAudioInfoForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetAudioInfoForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{27}
}

func (x *VodGetAudioInfoForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetAudioInfoForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type VodGetAutomaticSpeechRecognitionForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid      string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`           // Vid
	Strategy string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"` // 语音转文字模板中的Strategy
}

func (x *VodGetAutomaticSpeechRecognitionForAuditRequest) Reset() {
	*x = VodGetAutomaticSpeechRecognitionForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAutomaticSpeechRecognitionForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAutomaticSpeechRecognitionForAuditRequest) ProtoMessage() {}

func (x *VodGetAutomaticSpeechRecognitionForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAutomaticSpeechRecognitionForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetAutomaticSpeechRecognitionForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{28}
}

func (x *VodGetAutomaticSpeechRecognitionForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetAutomaticSpeechRecognitionForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type VodGetAudioEventDetectionForAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid      string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`           // Vid
	Strategy string `protobuf:"bytes,2,opt,name=Strategy,proto3" json:"Strategy,omitempty"` // 语音转文字模板中的Strategy
}

func (x *VodGetAudioEventDetectionForAuditRequest) Reset() {
	*x = VodGetAudioEventDetectionForAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAudioEventDetectionForAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAudioEventDetectionForAuditRequest) ProtoMessage() {}

func (x *VodGetAudioEventDetectionForAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAudioEventDetectionForAuditRequest.ProtoReflect.Descriptor instead.
func (*VodGetAudioEventDetectionForAuditRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{29}
}

func (x *VodGetAudioEventDetectionForAuditRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetAudioEventDetectionForAuditRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type VodCreateVideoClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName      string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Level          int32  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	ParentId       int64  `protobuf:"varint,3,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	Classification string `protobuf:"bytes,4,opt,name=Classification,proto3" json:"Classification,omitempty"`
}

func (x *VodCreateVideoClassificationRequest) Reset() {
	*x = VodCreateVideoClassificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateVideoClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateVideoClassificationRequest) ProtoMessage() {}

func (x *VodCreateVideoClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateVideoClassificationRequest.ProtoReflect.Descriptor instead.
func (*VodCreateVideoClassificationRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{30}
}

func (x *VodCreateVideoClassificationRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreateVideoClassificationRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VodCreateVideoClassificationRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *VodCreateVideoClassificationRequest) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

type VodUpdateVideoClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName        string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	ClassificationId int64  `protobuf:"varint,2,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"`
	Classification   string `protobuf:"bytes,3,opt,name=Classification,proto3" json:"Classification,omitempty"`
}

func (x *VodUpdateVideoClassificationRequest) Reset() {
	*x = VodUpdateVideoClassificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateVideoClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateVideoClassificationRequest) ProtoMessage() {}

func (x *VodUpdateVideoClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateVideoClassificationRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateVideoClassificationRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{31}
}

func (x *VodUpdateVideoClassificationRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateVideoClassificationRequest) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

func (x *VodUpdateVideoClassificationRequest) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

type VodDeleteVideoClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName        string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	ClassificationId int64  `protobuf:"varint,2,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"`
}

func (x *VodDeleteVideoClassificationRequest) Reset() {
	*x = VodDeleteVideoClassificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteVideoClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteVideoClassificationRequest) ProtoMessage() {}

func (x *VodDeleteVideoClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteVideoClassificationRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteVideoClassificationRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{32}
}

func (x *VodDeleteVideoClassificationRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodDeleteVideoClassificationRequest) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

type VodListVideoClassificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName        string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	ClassificationId int64  `protobuf:"varint,2,opt,name=ClassificationId,proto3" json:"ClassificationId,omitempty"`
}

func (x *VodListVideoClassificationsRequest) Reset() {
	*x = VodListVideoClassificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListVideoClassificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListVideoClassificationsRequest) ProtoMessage() {}

func (x *VodListVideoClassificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListVideoClassificationsRequest.ProtoReflect.Descriptor instead.
func (*VodListVideoClassificationsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{33}
}

func (x *VodListVideoClassificationsRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodListVideoClassificationsRequest) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

type VodListSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`
}

func (x *VodListSnapshotsRequest) Reset() {
	*x = VodListSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListSnapshotsRequest) ProtoMessage() {}

func (x *VodListSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*VodListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{34}
}

func (x *VodListSnapshotsRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

type VodGetFileListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"` //空间名
	Prefix    string `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`       //前缀，默认为/（即全量list）
	Limit     string `protobuf:"bytes,3,opt,name=Limit,proto3" json:"Limit,omitempty"`         //展示上限（不得超过1000，默认100）
	Starter   string `protobuf:"bytes,4,opt,name=Starter,proto3" json:"Starter,omitempty"`     //列举对象的起始位置
}

func (x *VodGetFileListRequest) Reset() {
	*x = VodGetFileListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetFileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetFileListRequest) ProtoMessage() {}

func (x *VodGetFileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetFileListRequest.ProtoReflect.Descriptor instead.
func (*VodGetFileListRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{35}
}

func (x *VodGetFileListRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetFileListRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *VodGetFileListRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *VodGetFileListRequest) GetStarter() string {
	if x != nil {
		return x.Starter
	}
	return ""
}

type VodExtractMediaMetaTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"` // vid
}

func (x *VodExtractMediaMetaTaskRequest) Reset() {
	*x = VodExtractMediaMetaTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodExtractMediaMetaTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodExtractMediaMetaTaskRequest) ProtoMessage() {}

func (x *VodExtractMediaMetaTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodExtractMediaMetaTaskRequest.ProtoReflect.Descriptor instead.
func (*VodExtractMediaMetaTaskRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{36}
}

func (x *VodExtractMediaMetaTaskRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

// **********************************************************************
// 转码
// **********************************************************************
type VodStartWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid               string                   `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                              // 视频Id
	TemplateId        string                   `protobuf:"bytes,2,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`                // 工作流模板Id
	Input             *business.WorkflowParams `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`                          // 动态参数
	Priority          int32                    `protobuf:"varint,4,opt,name=Priority,proto3" json:"Priority,omitempty"`                   // 任务优先级
	CallbackArgs      string                   `protobuf:"bytes,5,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`            // 回调参数
	EnableLowPriority bool                     `protobuf:"varint,6,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"` // 是否使能闲时转码
	DirectUrl         *business.DirectUrl      `protobuf:"bytes,7,opt,name=DirectUrl,proto3" json:"DirectUrl,omitempty"`                  // DirectUrl输入
	TaskListId        string                   `protobuf:"bytes,8,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`
}

func (x *VodStartWorkflowRequest) Reset() {
	*x = VodStartWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStartWorkflowRequest) ProtoMessage() {}

func (x *VodStartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*VodStartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{37}
}

func (x *VodStartWorkflowRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodStartWorkflowRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodStartWorkflowRequest) GetInput() *business.WorkflowParams {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *VodStartWorkflowRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *VodStartWorkflowRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodStartWorkflowRequest) GetEnableLowPriority() bool {
	if x != nil {
		return x.EnableLowPriority
	}
	return false
}

func (x *VodStartWorkflowRequest) GetDirectUrl() *business.DirectUrl {
	if x != nil {
		return x.DirectUrl
	}
	return nil
}

func (x *VodStartWorkflowRequest) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

type VodRetrieveTranscodeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid        string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`               // 视频Id
	ResultType string `protobuf:"bytes,2,opt,name=ResultType,proto3" json:"ResultType,omitempty"` // 预期获取的结果类型，可选：inspection、category_tags，支持多选，用,分隔，例如inspection,category_tags
}

func (x *VodRetrieveTranscodeResultRequest) Reset() {
	*x = VodRetrieveTranscodeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodRetrieveTranscodeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodRetrieveTranscodeResultRequest) ProtoMessage() {}

func (x *VodRetrieveTranscodeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodRetrieveTranscodeResultRequest.ProtoReflect.Descriptor instead.
func (*VodRetrieveTranscodeResultRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{38}
}

func (x *VodRetrieveTranscodeResultRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodRetrieveTranscodeResultRequest) GetResultType() string {
	if x != nil {
		return x.ResultType
	}
	return ""
}

type VodListWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId             string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`                         // 工作流执行Id
	Vid               string `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                             // 视频ID
	SpaceName         string `protobuf:"bytes,3,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                 // 空间名
	TemplateId        string `protobuf:"bytes,4,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`               //模板ID，即工作流ID
	TaskListId        string `protobuf:"bytes,5,opt,name=TaskListId,proto3" json:"TaskListId,omitempty"`               //任务队列ID
	EnableLowPriority string `protobuf:"bytes,6,opt,name=EnableLowPriority,proto3" json:"EnableLowPriority,omitempty"` //闲时转码
	JobSource         string `protobuf:"bytes,7,opt,name=JobSource,proto3" json:"JobSource,omitempty"`                 //任务来源，逗号分隔，例如：API,TranscodeStrategy
	Status            string `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`                       //执行状态,逗号分隔，例如：0,1001
	StartTime         string `protobuf:"bytes,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                 //创建时间的开始时间格式：RFC3339,例如：2019-01-23T12:35:12Z,2019-01-23T12:40:12Z
	EndTime           string `protobuf:"bytes,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                    //创建时间的结束时间，格式按照 rfc3339标准表示，格式为
	// yyyy-MM-ddTHH:mm:ssZ
	PageSize   string `protobuf:"bytes,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`     // 指定一次请求返回结果的限长
	Offset     string `protobuf:"bytes,12,opt,name=Offset,proto3" json:"Offset,omitempty"`         //用于分页
	OrderByKey string `protobuf:"bytes,13,opt,name=OrderByKey,proto3" json:"OrderByKey,omitempty"` //结果列表排序依赖的键，支持按时间字段created_at或updated_at排序，默认按created_at排序
	Order      string `protobuf:"bytes,14,opt,name=Order,proto3" json:"Order,omitempty"`           //排序的升降属性，默认desc
}

func (x *VodListWorkflowExecutionRequest) Reset() {
	*x = VodListWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListWorkflowExecutionRequest) ProtoMessage() {}

func (x *VodListWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*VodListWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{39}
}

func (x *VodListWorkflowExecutionRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetTaskListId() string {
	if x != nil {
		return x.TaskListId
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetEnableLowPriority() string {
	if x != nil {
		return x.EnableLowPriority
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetJobSource() string {
	if x != nil {
		return x.JobSource
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetPageSize() string {
	if x != nil {
		return x.PageSize
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetOrderByKey() string {
	if x != nil {
		return x.OrderByKey
	}
	return ""
}

func (x *VodListWorkflowExecutionRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type VodGetWorkflowExecutionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"` // 工作流执行Id
}

func (x *VodGetWorkflowExecutionDetailRequest) Reset() {
	*x = VodGetWorkflowExecutionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetWorkflowExecutionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetWorkflowExecutionDetailRequest) ProtoMessage() {}

func (x *VodGetWorkflowExecutionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetWorkflowExecutionDetailRequest.ProtoReflect.Descriptor instead.
func (*VodGetWorkflowExecutionDetailRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{40}
}

func (x *VodGetWorkflowExecutionDetailRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type VodGetWorkflowResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"` // 工作流执行Id
}

func (x *VodGetWorkflowResultRequest) Reset() {
	*x = VodGetWorkflowResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetWorkflowResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetWorkflowResultRequest) ProtoMessage() {}

func (x *VodGetWorkflowResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetWorkflowResultRequest.ProtoReflect.Descriptor instead.
func (*VodGetWorkflowResultRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{41}
}

func (x *VodGetWorkflowResultRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type VodGetWorkflowExecutionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId           string `protobuf:"bytes,1,opt,name=RunId,proto3" json:"RunId,omitempty"`                     // 工作流执行Id
	NeedTasksDetail string `protobuf:"bytes,2,opt,name=NeedTasksDetail,proto3" json:"NeedTasksDetail,omitempty"` // 是否需要子任务详情: true/false
}

func (x *VodGetWorkflowExecutionStatusRequest) Reset() {
	*x = VodGetWorkflowExecutionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetWorkflowExecutionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetWorkflowExecutionStatusRequest) ProtoMessage() {}

func (x *VodGetWorkflowExecutionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetWorkflowExecutionStatusRequest.ProtoReflect.Descriptor instead.
func (*VodGetWorkflowExecutionStatusRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{42}
}

func (x *VodGetWorkflowExecutionStatusRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *VodGetWorkflowExecutionStatusRequest) GetNeedTasksDetail() string {
	if x != nil {
		return x.NeedTasksDetail
	}
	return ""
}

// **********************************************************************
// 视频编辑
// **********************************************************************
type VodSubmitDirectEditTaskAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uploader     string `protobuf:"bytes,1,opt,name=Uploader,proto3" json:"Uploader,omitempty"`         // 产物上传空间
	Application  string `protobuf:"bytes,2,opt,name=Application,proto3" json:"Application,omitempty"`   // Application名称
	EditParam    []byte `protobuf:"bytes,4,opt,name=EditParam,proto3" json:"EditParam,omitempty"`       // 编辑参数
	Priority     int32  `protobuf:"varint,5,opt,name=Priority,proto3" json:"Priority,omitempty"`        // 优先级
	CallbackUri  string `protobuf:"bytes,6,opt,name=CallbackUri,proto3" json:"CallbackUri,omitempty"`   // 回调地址
	CallbackArgs string `protobuf:"bytes,7,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"` // 回调参数
}

func (x *VodSubmitDirectEditTaskAsyncRequest) Reset() {
	*x = VodSubmitDirectEditTaskAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubmitDirectEditTaskAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubmitDirectEditTaskAsyncRequest) ProtoMessage() {}

func (x *VodSubmitDirectEditTaskAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubmitDirectEditTaskAsyncRequest.ProtoReflect.Descriptor instead.
func (*VodSubmitDirectEditTaskAsyncRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{43}
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetUploader() string {
	if x != nil {
		return x.Uploader
	}
	return ""
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetEditParam() []byte {
	if x != nil {
		return x.EditParam
	}
	return nil
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetCallbackUri() string {
	if x != nil {
		return x.CallbackUri
	}
	return ""
}

func (x *VodSubmitDirectEditTaskAsyncRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

type VodGetDirectEditResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqIds []string `protobuf:"bytes,1,rep,name=ReqIds,proto3" json:"ReqIds,omitempty"`
}

func (x *VodGetDirectEditResultRequest) Reset() {
	*x = VodGetDirectEditResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetDirectEditResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetDirectEditResultRequest) ProtoMessage() {}

func (x *VodGetDirectEditResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetDirectEditResultRequest.ProtoReflect.Descriptor instead.
func (*VodGetDirectEditResultRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{44}
}

func (x *VodGetDirectEditResultRequest) GetReqIds() []string {
	if x != nil {
		return x.ReqIds
	}
	return nil
}

type VodGetDirectEditProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId string `protobuf:"bytes,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
}

func (x *VodGetDirectEditProgressRequest) Reset() {
	*x = VodGetDirectEditProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetDirectEditProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetDirectEditProgressRequest) ProtoMessage() {}

func (x *VodGetDirectEditProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetDirectEditProgressRequest.ProtoReflect.Descriptor instead.
func (*VodGetDirectEditProgressRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{45}
}

func (x *VodGetDirectEditProgressRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

// **********************************************************************
// 空间管理
// **********************************************************************
type VodCreateSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 项目名
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	// 描述
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// 空间区域
	Region string `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	// 创建用户
	UserName string `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *VodCreateSpaceRequest) Reset() {
	*x = VodCreateSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateSpaceRequest) ProtoMessage() {}

func (x *VodCreateSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateSpaceRequest.ProtoReflect.Descriptor instead.
func (*VodCreateSpaceRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{46}
}

func (x *VodCreateSpaceRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreateSpaceRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *VodCreateSpaceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VodCreateSpaceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VodCreateSpaceRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type VodGetSpaceDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodGetSpaceDetailRequest) Reset() {
	*x = VodGetSpaceDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetSpaceDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetSpaceDetailRequest) ProtoMessage() {}

func (x *VodGetSpaceDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetSpaceDetailRequest.ProtoReflect.Descriptor instead.
func (*VodGetSpaceDetailRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{47}
}

func (x *VodGetSpaceDetailRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodListSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询游标
	Offset float64 `protobuf:"fixed64,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// 查询数量
	Limit float64 `protobuf:"fixed64,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// 项目名称
	ProjectName string `protobuf:"bytes,3,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
}

func (x *VodListSpaceRequest) Reset() {
	*x = VodListSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListSpaceRequest) ProtoMessage() {}

func (x *VodListSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListSpaceRequest.ProtoReflect.Descriptor instead.
func (*VodListSpaceRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{48}
}

func (x *VodListSpaceRequest) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodListSpaceRequest) GetLimit() float64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VodListSpaceRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type VodUpdateSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 描述
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *VodUpdateSpaceRequest) Reset() {
	*x = VodUpdateSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateSpaceRequest) ProtoMessage() {}

func (x *VodUpdateSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateSpaceRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateSpaceRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{49}
}

func (x *VodUpdateSpaceRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateSpaceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type VodUpdateSpaceUploadConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 需要变更的设置key，值为VodSpaceUploadConfigKey中的枚举数字
	ConfigKey string `protobuf:"bytes,2,opt,name=ConfigKey,proto3" json:"ConfigKey,omitempty"`
	// 需要变更的设置value，取值与ConfigKey相关。
	// ConfigKey传入1时，ConfigValue可选值为”true“或”false“;
	// ConfigKey传入2时，ConfigValue可选值为”Available“或”Unavailable“
	ConfigValue string `protobuf:"bytes,3,opt,name=ConfigValue,proto3" json:"ConfigValue,omitempty"`
}

func (x *VodUpdateSpaceUploadConfigRequest) Reset() {
	*x = VodUpdateSpaceUploadConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateSpaceUploadConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateSpaceUploadConfigRequest) ProtoMessage() {}

func (x *VodUpdateSpaceUploadConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateSpaceUploadConfigRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateSpaceUploadConfigRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{50}
}

func (x *VodUpdateSpaceUploadConfigRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateSpaceUploadConfigRequest) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *VodUpdateSpaceUploadConfigRequest) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

type VodDescribeVodSpaceStorageDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"` // SpaceList, multiple space names are divided by
	// commas
	StartTime   string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`      // start time of query rfc3339
	EndTime     string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`          // end time of query rfc3339
	Aggregation int32  `protobuf:"varint,4,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"` // default and only supports 86400
	Type        string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`                // hot default, lowfreq, punish
}

func (x *VodDescribeVodSpaceStorageDataRequest) Reset() {
	*x = VodDescribeVodSpaceStorageDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeVodSpaceStorageDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeVodSpaceStorageDataRequest) ProtoMessage() {}

func (x *VodDescribeVodSpaceStorageDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeVodSpaceStorageDataRequest.ProtoReflect.Descriptor instead.
func (*VodDescribeVodSpaceStorageDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{51}
}

func (x *VodDescribeVodSpaceStorageDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *VodDescribeVodSpaceStorageDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodDescribeVodSpaceStorageDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodDescribeVodSpaceStorageDataRequest) GetAggregation() int32 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *VodDescribeVodSpaceStorageDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// **********************************************************************
// 分发加速管理
// **********************************************************************
type VodStartDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType        string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain            string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	SourceStationType int32  `protobuf:"varint,4,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"` // 0未定义 1点播源站 2第三方源站
}

func (x *VodStartDomainRequest) Reset() {
	*x = VodStartDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStartDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStartDomainRequest) ProtoMessage() {}

func (x *VodStartDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStartDomainRequest.ProtoReflect.Descriptor instead.
func (*VodStartDomainRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{52}
}

func (x *VodStartDomainRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodStartDomainRequest) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodStartDomainRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodStartDomainRequest) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

type VodStopDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType        string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain            string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	SourceStationType int32  `protobuf:"varint,4,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"` // 0未定义 1点播源站 2第三方源站
}

func (x *VodStopDomainRequest) Reset() {
	*x = VodStopDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStopDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStopDomainRequest) ProtoMessage() {}

func (x *VodStopDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStopDomainRequest.ProtoReflect.Descriptor instead.
func (*VodStopDomainRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{53}
}

func (x *VodStopDomainRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodStopDomainRequest) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodStopDomainRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodStopDomainRequest) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

type VodUpdateDomainPlayRuleRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName     string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DefaultDomain string `protobuf:"bytes,2,opt,name=DefaultDomain,proto3" json:"DefaultDomain,omitempty"` //默认域名
	PlayRule      int32  `protobuf:"varint,3,opt,name=PlayRule,proto3" json:"PlayRule,omitempty"`          // 0 随机模式 1 默认域名模式
}

func (x *VodUpdateDomainPlayRuleRequestRequest) Reset() {
	*x = VodUpdateDomainPlayRuleRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateDomainPlayRuleRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateDomainPlayRuleRequestRequest) ProtoMessage() {}

func (x *VodUpdateDomainPlayRuleRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateDomainPlayRuleRequestRequest.ProtoReflect.Descriptor instead.
func (*VodUpdateDomainPlayRuleRequestRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{54}
}

func (x *VodUpdateDomainPlayRuleRequestRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateDomainPlayRuleRequestRequest) GetDefaultDomain() string {
	if x != nil {
		return x.DefaultDomain
	}
	return ""
}

func (x *VodUpdateDomainPlayRuleRequestRequest) GetPlayRule() int32 {
	if x != nil {
		return x.PlayRule
	}
	return 0
}

type VodAddDomainToSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType        string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain            string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	SourceStationType int32  `protobuf:"varint,4,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"` // 0未定义 1点播源站 2第三方源站
}

func (x *VodAddDomainToSchedulerRequest) Reset() {
	*x = VodAddDomainToSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAddDomainToSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAddDomainToSchedulerRequest) ProtoMessage() {}

func (x *VodAddDomainToSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAddDomainToSchedulerRequest.ProtoReflect.Descriptor instead.
func (*VodAddDomainToSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{55}
}

func (x *VodAddDomainToSchedulerRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodAddDomainToSchedulerRequest) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodAddDomainToSchedulerRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodAddDomainToSchedulerRequest) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

type VodRemoveDomainFromSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType        string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain            string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	SourceStationType int32  `protobuf:"varint,4,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"` // 0未定义 1点播源站 2第三方源站
}

func (x *VodRemoveDomainFromSchedulerRequest) Reset() {
	*x = VodRemoveDomainFromSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodRemoveDomainFromSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodRemoveDomainFromSchedulerRequest) ProtoMessage() {}

func (x *VodRemoveDomainFromSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodRemoveDomainFromSchedulerRequest.ProtoReflect.Descriptor instead.
func (*VodRemoveDomainFromSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{56}
}

func (x *VodRemoveDomainFromSchedulerRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodRemoveDomainFromSchedulerRequest) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodRemoveDomainFromSchedulerRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodRemoveDomainFromSchedulerRequest) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

type VodListDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 域名类型
	// 播放域名:play
	// 封面域名:image
	DomainType string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	// 源站类型
	// 回点播源站:1
	// 第三方源站:2
	SourceStationType int32 `protobuf:"varint,3,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"`
	// 跳过域名组的游标
	Offset int32 `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// 单次查询域名组数量
	Limit int32 `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *VodListDomainRequest) Reset() {
	*x = VodListDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListDomainRequest) ProtoMessage() {}

func (x *VodListDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListDomainRequest.ProtoReflect.Descriptor instead.
func (*VodListDomainRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{57}
}

func (x *VodListDomainRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodListDomainRequest) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodListDomainRequest) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

func (x *VodListDomainRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *VodListDomainRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type VodCreateCdnRefreshTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 刷新Url或目录
	Urls string `protobuf:"bytes,2,opt,name=Urls,proto3" json:"Urls,omitempty"`
	// 刷新任务类型
	Type string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *VodCreateCdnRefreshTaskRequest) Reset() {
	*x = VodCreateCdnRefreshTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateCdnRefreshTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateCdnRefreshTaskRequest) ProtoMessage() {}

func (x *VodCreateCdnRefreshTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateCdnRefreshTaskRequest.ProtoReflect.Descriptor instead.
func (*VodCreateCdnRefreshTaskRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{58}
}

func (x *VodCreateCdnRefreshTaskRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreateCdnRefreshTaskRequest) GetUrls() string {
	if x != nil {
		return x.Urls
	}
	return ""
}

func (x *VodCreateCdnRefreshTaskRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type VodCreateCdnPreloadTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 预热Url
	Urls string `protobuf:"bytes,2,opt,name=Urls,proto3" json:"Urls,omitempty"`
}

func (x *VodCreateCdnPreloadTaskRequest) Reset() {
	*x = VodCreateCdnPreloadTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateCdnPreloadTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateCdnPreloadTaskRequest) ProtoMessage() {}

func (x *VodCreateCdnPreloadTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateCdnPreloadTaskRequest.ProtoReflect.Descriptor instead.
func (*VodCreateCdnPreloadTaskRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{59}
}

func (x *VodCreateCdnPreloadTaskRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreateCdnPreloadTaskRequest) GetUrls() string {
	if x != nil {
		return x.Urls
	}
	return ""
}

type VodListCdnTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 任务ID
	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// 域名
	DomainName string `protobuf:"bytes,3,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	// 任务类型
	TaskType string `protobuf:"bytes,4,opt,name=TaskType,proto3" json:"TaskType,omitempty"`
	// 任务状态
	Status string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	// 起始时间戳，单位：Unix秒级时间戳
	StartTimestamp int32 `protobuf:"varint,6,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 截止时间戳，单位：Unix秒级时间戳
	EndTimestamp int32 `protobuf:"varint,7,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 页码
	PageNum int32 `protobuf:"varint,8,opt,name=PageNum,proto3" json:"PageNum,omitempty"`
	// 页面大小
	PageSize int32 `protobuf:"varint,9,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *VodListCdnTasksRequest) Reset() {
	*x = VodListCdnTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnTasksRequest) ProtoMessage() {}

func (x *VodListCdnTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnTasksRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnTasksRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{60}
}

func (x *VodListCdnTasksRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodListCdnTasksRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VodListCdnTasksRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *VodListCdnTasksRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *VodListCdnTasksRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodListCdnTasksRequest) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnTasksRequest) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnTasksRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *VodListCdnTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type VodListCdnAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名（当前仅支持设置一个域名）
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 查询起始时间戳，单位：Unix秒级时间戳
	StartTimestamp int32 `protobuf:"varint,2,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询结束时间戳，单位：Unix秒级时间戳
	EndTimestamp int32 `protobuf:"varint,3,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 空间名称
	SpaceName string `protobuf:"bytes,4,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodListCdnAccessLogRequest) Reset() {
	*x = VodListCdnAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnAccessLogRequest) ProtoMessage() {}

func (x *VodListCdnAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnAccessLogRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{61}
}

func (x *VodListCdnAccessLogRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnAccessLogRequest) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnAccessLogRequest) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnAccessLogRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodListCdnTopAccessUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名（当前仅支持一个域名)
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 查询起始时间戳，单位：Unix秒级时间戳
	StartTimestamp int32 `protobuf:"varint,2,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询结束时间戳，单位：Unix秒级时间戳
	EndTimestamp int32 `protobuf:"varint,3,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 排序方式，默认值为pv。取值：flux - 流量, pv -访问量
	SortType string `protobuf:"bytes,4,opt,name=SortType,proto3" json:"SortType,omitempty"`
}

func (x *VodListCdnTopAccessUrlRequest) Reset() {
	*x = VodListCdnTopAccessUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnTopAccessUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnTopAccessUrlRequest) ProtoMessage() {}

func (x *VodListCdnTopAccessUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnTopAccessUrlRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnTopAccessUrlRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{62}
}

func (x *VodListCdnTopAccessUrlRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnTopAccessUrlRequest) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnTopAccessUrlRequest) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnTopAccessUrlRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

type VodListCdnTopAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名（当前仅支持一个域名)
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 查询起始时间戳，单位：Unix秒级时间戳
	StartTimestamp int32 `protobuf:"varint,2,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询结束时间戳，单位：Unix秒级时间戳
	EndTimestamp int32 `protobuf:"varint,3,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 排序方式，默认值为pv。取值：flux - 流量, pv -访问量
	SortType string `protobuf:"bytes,4,opt,name=SortType,proto3" json:"SortType,omitempty"`
	// 指定一个统计字段，默认值为url。取值：url：表示请求 URL, referer：表示请求
	// Referer
	Item string `protobuf:"bytes,5,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (x *VodListCdnTopAccessRequest) Reset() {
	*x = VodListCdnTopAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnTopAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnTopAccessRequest) ProtoMessage() {}

func (x *VodListCdnTopAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnTopAccessRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnTopAccessRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{63}
}

func (x *VodListCdnTopAccessRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnTopAccessRequest) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnTopAccessRequest) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnTopAccessRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *VodListCdnTopAccessRequest) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type VodDescribeVodDomainBandwidthDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名列表,多个域名用逗号分割
	DomainList string `protobuf:"bytes,1,opt,name=DomainList,proto3" json:"DomainList,omitempty"`
	// 查询的起始时间, rfc3339
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 查询的结束时间, rfc3339；查询时间跨度不超过93天
	EndTime string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 聚合的时间粒度，单位秒，默认300，支持300，1800，3600和86400
	Aggregation int32 `protobuf:"varint,4,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`
	// 默认是CDN，支持CDN、PCDN、ALL
	BandwidthType string `protobuf:"bytes,5,opt,name=BandwidthType,proto3" json:"BandwidthType,omitempty"`
	// 加速区域
	Area string `protobuf:"bytes,6,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (x *VodDescribeVodDomainBandwidthDataRequest) Reset() {
	*x = VodDescribeVodDomainBandwidthDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeVodDomainBandwidthDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeVodDomainBandwidthDataRequest) ProtoMessage() {}

func (x *VodDescribeVodDomainBandwidthDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeVodDomainBandwidthDataRequest.ProtoReflect.Descriptor instead.
func (*VodDescribeVodDomainBandwidthDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{64}
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetDomainList() string {
	if x != nil {
		return x.DomainList
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetAggregation() int32 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetBandwidthType() string {
	if x != nil {
		return x.BandwidthType
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

type VodListCdnUsageDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名，多个用逗号隔开
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 聚合度
	Interval string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	// 查询范围起始时间
	StartTimestamp int64 `protobuf:"varint,3,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询范围截止时间
	EndTimestamp int64 `protobuf:"varint,4,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 统计数据类别
	DataType string `protobuf:"bytes,5,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// 指标类别
	Metric        string `protobuf:"bytes,6,opt,name=Metric,proto3" json:"Metric,omitempty"`
	NeedDetail    bool   `protobuf:"varint,7,opt,name=NeedDetail,proto3" json:"NeedDetail,omitempty"`
	Area          string `protobuf:"bytes,8,opt,name=Area,proto3" json:"Area,omitempty"`
	Region        string `protobuf:"bytes,9,opt,name=Region,proto3" json:"Region,omitempty"`
	Isp           string `protobuf:"bytes,10,opt,name=Isp,proto3" json:"Isp,omitempty"`
	Protocol      string `protobuf:"bytes,11,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	IpVersion     string `protobuf:"bytes,12,opt,name=IpVersion,proto3" json:"IpVersion,omitempty"`
	BillingRegion string `protobuf:"bytes,13,opt,name=BillingRegion,proto3" json:"BillingRegion,omitempty"`
	// 时区。取值 "Etc/GMT", "Etc/GMT-1", "Etc/GMT-2", "Etc/GMT-3", "Etc/GMT-4",
	// "Etc/GMT-5", "Etc/GMT-6", "Etc/GMT-7", "Etc/GMT-8", "Etc/GMT-9",
	// "Etc/GMT-10", "Etc/GMT-11", "Etc/GMT-12", "Etc/GMT+1", "Etc/GMT+2",
	// "Etc/GMT+3", "Etc/GMT+4", "Etc/GMT+5", "Etc/GMT+6", "Etc/GMT+7",
	// "Etc/GMT+8", "Etc/GMT+9", "Etc/GMT+10", "Etc/GMT+11", "Etc/GMT+12"
	TimeZone string `protobuf:"bytes,14,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
}

func (x *VodListCdnUsageDataRequest) Reset() {
	*x = VodListCdnUsageDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnUsageDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnUsageDataRequest) ProtoMessage() {}

func (x *VodListCdnUsageDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnUsageDataRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnUsageDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{65}
}

func (x *VodListCdnUsageDataRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnUsageDataRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnUsageDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetNeedDetail() bool {
	if x != nil {
		return x.NeedDetail
	}
	return false
}

func (x *VodListCdnUsageDataRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetIpVersion() string {
	if x != nil {
		return x.IpVersion
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetBillingRegion() string {
	if x != nil {
		return x.BillingRegion
	}
	return ""
}

func (x *VodListCdnUsageDataRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type VodListCdnUsageDataDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名
	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	// 查询范围起始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 查询范围截止时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *VodListCdnUsageDataDetailRequest) Reset() {
	*x = VodListCdnUsageDataDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnUsageDataDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnUsageDataDetailRequest) ProtoMessage() {}

func (x *VodListCdnUsageDataDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnUsageDataDetailRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnUsageDataDetailRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{66}
}

func (x *VodListCdnUsageDataDetailRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodListCdnUsageDataDetailRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VodListCdnUsageDataDetailRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type VodListCdnStatusDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名，多个用逗号隔开
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 聚合度
	Interval string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	// 查询范围起始时间
	StartTimestamp int64 `protobuf:"varint,3,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询范围截止时间
	EndTimestamp int64 `protobuf:"varint,4,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 统计数据类别
	DataType string `protobuf:"bytes,5,opt,name=DataType,proto3" json:"DataType,omitempty"`
	// 指标类别
	Metric     string `protobuf:"bytes,6,opt,name=Metric,proto3" json:"Metric,omitempty"`
	NeedDetail bool   `protobuf:"varint,7,opt,name=NeedDetail,proto3" json:"NeedDetail,omitempty"`
	// 时区。取值 "Etc/GMT", "Etc/GMT-1", "Etc/GMT-2", "Etc/GMT-3", "Etc/GMT-4",
	// "Etc/GMT-5", "Etc/GMT-6", "Etc/GMT-7", "Etc/GMT-8", "Etc/GMT-9",
	// "Etc/GMT-10", "Etc/GMT-11", "Etc/GMT-12", "Etc/GMT+1", "Etc/GMT+2",
	// "Etc/GMT+3", "Etc/GMT+4", "Etc/GMT+5", "Etc/GMT+6", "Etc/GMT+7",
	// "Etc/GMT+8", "Etc/GMT+9", "Etc/GMT+10", "Etc/GMT+11", "Etc/GMT+12"
	TimeZone string `protobuf:"bytes,8,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
}

func (x *VodListCdnStatusDataRequest) Reset() {
	*x = VodListCdnStatusDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnStatusDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnStatusDataRequest) ProtoMessage() {}

func (x *VodListCdnStatusDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnStatusDataRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnStatusDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{67}
}

func (x *VodListCdnStatusDataRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnStatusDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *VodListCdnStatusDataRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnStatusDataRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnStatusDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *VodListCdnStatusDataRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *VodListCdnStatusDataRequest) GetNeedDetail() bool {
	if x != nil {
		return x.NeedDetail
	}
	return false
}

func (x *VodListCdnStatusDataRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type VodListCdnStatusDataDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名
	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	// 查询范围起始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 查询范围截止时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *VodListCdnStatusDataDetailRequest) Reset() {
	*x = VodListCdnStatusDataDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnStatusDataDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnStatusDataDetailRequest) ProtoMessage() {}

func (x *VodListCdnStatusDataDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnStatusDataDetailRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnStatusDataDetailRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{68}
}

func (x *VodListCdnStatusDataDetailRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodListCdnStatusDataDetailRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VodListCdnStatusDataDetailRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type VodDescribeIPInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips string `protobuf:"bytes,1,opt,name=Ips,proto3" json:"Ips,omitempty"` // ip，多个用逗号隔开
}

func (x *VodDescribeIPInfoRequest) Reset() {
	*x = VodDescribeIPInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeIPInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeIPInfoRequest) ProtoMessage() {}

func (x *VodDescribeIPInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeIPInfoRequest.ProtoReflect.Descriptor instead.
func (*VodDescribeIPInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{69}
}

func (x *VodDescribeIPInfoRequest) GetIps() string {
	if x != nil {
		return x.Ips
	}
	return ""
}

type VodListCdnPvDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名，多个用逗号隔开
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 聚合度,可选：auto,5min,hour,day
	Interval string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	// 查询范围起始时间
	StartTimestamp int64 `protobuf:"varint,3,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询范围截止时间
	EndTimestamp int64 `protobuf:"varint,4,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	// 统计数据类别, 可选edge-边缘数据,origin-回源数据
	DataType   string `protobuf:"bytes,5,opt,name=DataType,proto3" json:"DataType,omitempty"`
	NeedDetail bool   `protobuf:"varint,6,opt,name=NeedDetail,proto3" json:"NeedDetail,omitempty"`
	// 时区。取值 "Etc/GMT", "Etc/GMT-1", "Etc/GMT-2", "Etc/GMT-3", "Etc/GMT-4",
	// "Etc/GMT-5", "Etc/GMT-6", "Etc/GMT-7", "Etc/GMT-8", "Etc/GMT-9",
	// "Etc/GMT-10", "Etc/GMT-11", "Etc/GMT-12", "Etc/GMT+1", "Etc/GMT+2",
	// "Etc/GMT+3", "Etc/GMT+4", "Etc/GMT+5", "Etc/GMT+6", "Etc/GMT+7",
	// "Etc/GMT+8", "Etc/GMT+9", "Etc/GMT+10", "Etc/GMT+11", "Etc/GMT+12"
	TimeZone string `protobuf:"bytes,7,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
}

func (x *VodListCdnPvDataRequest) Reset() {
	*x = VodListCdnPvDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnPvDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnPvDataRequest) ProtoMessage() {}

func (x *VodListCdnPvDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnPvDataRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnPvDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{70}
}

func (x *VodListCdnPvDataRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnPvDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *VodListCdnPvDataRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnPvDataRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnPvDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *VodListCdnPvDataRequest) GetNeedDetail() bool {
	if x != nil {
		return x.NeedDetail
	}
	return false
}

func (x *VodListCdnPvDataRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type VodListCdnHitrateDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 域名，多个用逗号隔开
	Domains string `protobuf:"bytes,1,opt,name=Domains,proto3" json:"Domains,omitempty"`
	// 聚合度,可选：auto,5min,hour,day
	Interval string `protobuf:"bytes,2,opt,name=Interval,proto3" json:"Interval,omitempty"`
	// 查询范围起始时间
	StartTimestamp int64 `protobuf:"varint,3,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	// 查询范围截止时间
	EndTimestamp int64 `protobuf:"varint,4,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"` // 统计数据类别, 可选edge-边缘数据,origin-回源数据
	// 指标类别
	Metric     string `protobuf:"bytes,5,opt,name=Metric,proto3" json:"Metric,omitempty"`
	NeedDetail bool   `protobuf:"varint,6,opt,name=NeedDetail,proto3" json:"NeedDetail,omitempty"`
}

func (x *VodListCdnHitrateDataRequest) Reset() {
	*x = VodListCdnHitrateDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnHitrateDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnHitrateDataRequest) ProtoMessage() {}

func (x *VodListCdnHitrateDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnHitrateDataRequest.ProtoReflect.Descriptor instead.
func (*VodListCdnHitrateDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{71}
}

func (x *VodListCdnHitrateDataRequest) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *VodListCdnHitrateDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *VodListCdnHitrateDataRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodListCdnHitrateDataRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *VodListCdnHitrateDataRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *VodListCdnHitrateDataRequest) GetNeedDetail() bool {
	if x != nil {
		return x.NeedDetail
	}
	return false
}

type VodDescribeVodDomainTrafficDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainList  string `protobuf:"bytes,1,opt,name=DomainList,proto3" json:"DomainList,omitempty"`    // list of domains to query
	StartTime   string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`      // rfc339
	EndTime     string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`          // rfc339
	Aggregation int32  `protobuf:"varint,4,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"` // default 300, supports 1800, 3600 and 86400
	TrafficType string `protobuf:"bytes,5,opt,name=TrafficType,proto3" json:"TrafficType,omitempty"`  // PCDN, CDN, or ALL
}

func (x *VodDescribeVodDomainTrafficDataRequest) Reset() {
	*x = VodDescribeVodDomainTrafficDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeVodDomainTrafficDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeVodDomainTrafficDataRequest) ProtoMessage() {}

func (x *VodDescribeVodDomainTrafficDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeVodDomainTrafficDataRequest.ProtoReflect.Descriptor instead.
func (*VodDescribeVodDomainTrafficDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{72}
}

func (x *VodDescribeVodDomainTrafficDataRequest) GetDomainList() string {
	if x != nil {
		return x.DomainList
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataRequest) GetAggregation() int32 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *VodDescribeVodDomainTrafficDataRequest) GetTrafficType() string {
	if x != nil {
		return x.TrafficType
	}
	return ""
}

type VodSubmitBlockTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 媒体Url列表：
	// 指定一个或多个内容 URL，内容 URL 以 http:// 或 https:// 开头。多个内容 URL
	// 用\n分隔。 每次最多可提交 100 条。
	FileUrls  string `protobuf:"bytes,1,opt,name=FileUrls,proto3" json:"FileUrls,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"` // forbid：禁播，recover：解禁。
}

func (x *VodSubmitBlockTasksRequest) Reset() {
	*x = VodSubmitBlockTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubmitBlockTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubmitBlockTasksRequest) ProtoMessage() {}

func (x *VodSubmitBlockTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubmitBlockTasksRequest.ProtoReflect.Descriptor instead.
func (*VodSubmitBlockTasksRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{73}
}

func (x *VodSubmitBlockTasksRequest) GetFileUrls() string {
	if x != nil {
		return x.FileUrls
	}
	return ""
}

func (x *VodSubmitBlockTasksRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

type VodGetContentBlockTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`       //指定一个内容URL
	Domain string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"` //指定一个加速域名以包含属于该加速域名的内容 URL。
	TaskID string `protobuf:"bytes,3,opt,name=TaskID,proto3" json:"TaskID,omitempty"` //指定一个任务 ID，任务 ID 精确匹配。
	// 指定一个任务类型，该参数的可用值如下：
	// block_url：封禁任务。
	// unblock_url：解封任务。
	// 必填
	TaskType string `protobuf:"bytes,4,opt,name=TaskType,proto3" json:"TaskType,omitempty"`
	// 指定一个内容 URL 的状态。该参数的可用值如下：
	// complete：已完成。
	// running：执行中。
	// failed：执行失败。
	Status string `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	// 指定一个时间，时间格式是 Unix
	// 时间戳。该时间用以包含提交时间大于或等于该时间的任务。您无法查询超过 7
	// 天的任务。
	StartTime int64 `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	// 指定一个时间，时间格式是 Unix
	// 时间戳。该时间用以包含提交时间小于或等于该时间的任务。您无法查询超过 7
	// 天的任务。
	EndTime int64 `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// 指定一个页码。系统只返回该页面上的那些任务。
	PageNum int64 `protobuf:"varint,8,opt,name=PageNum,proto3" json:"PageNum,omitempty"`
	// 指定响应正文中每页包含的任务数量。
	PageSize int64 `protobuf:"varint,9,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *VodGetContentBlockTasksRequest) Reset() {
	*x = VodGetContentBlockTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetContentBlockTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetContentBlockTasksRequest) ProtoMessage() {}

func (x *VodGetContentBlockTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetContentBlockTasksRequest.ProtoReflect.Descriptor instead.
func (*VodGetContentBlockTasksRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{74}
}

func (x *VodGetContentBlockTasksRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VodGetContentBlockTasksRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodGetContentBlockTasksRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *VodGetContentBlockTasksRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *VodGetContentBlockTasksRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodGetContentBlockTasksRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VodGetContentBlockTasksRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VodGetContentBlockTasksRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *VodGetContentBlockTasksRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type VodCreateDomainV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName                string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType               string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain                   string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"` // 域名
	SourceStationType        int32  `protobuf:"varint,5,opt,name=SourceStationType,proto3" json:"SourceStationType,omitempty"`
	SourceStationAddressType int32  `protobuf:"varint,6,opt,name=SourceStationAddressType,proto3" json:"SourceStationAddressType,omitempty"` //源站地址类型
	Origins                  string `protobuf:"bytes,7,opt,name=Origins,proto3" json:"Origins,omitempty"`                                    //源站地址
	Area                     string `protobuf:"bytes,8,opt,name=Area,proto3" json:"Area,omitempty"`                                          //地区
	BucketName               string `protobuf:"bytes,9,opt,name=BucketName,proto3" json:"BucketName,omitempty"`                              //挂载tos 桶名称
}

func (x *VodCreateDomainV2Request) Reset() {
	*x = VodCreateDomainV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateDomainV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateDomainV2Request) ProtoMessage() {}

func (x *VodCreateDomainV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateDomainV2Request.ProtoReflect.Descriptor instead.
func (*VodCreateDomainV2Request) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{75}
}

func (x *VodCreateDomainV2Request) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreateDomainV2Request) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodCreateDomainV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodCreateDomainV2Request) GetSourceStationType() int32 {
	if x != nil {
		return x.SourceStationType
	}
	return 0
}

func (x *VodCreateDomainV2Request) GetSourceStationAddressType() int32 {
	if x != nil {
		return x.SourceStationAddressType
	}
	return 0
}

func (x *VodCreateDomainV2Request) GetOrigins() string {
	if x != nil {
		return x.Origins
	}
	return ""
}

func (x *VodCreateDomainV2Request) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *VodCreateDomainV2Request) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type VodUpdateDomainExpireV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName  string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain     string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Expire     int32  `protobuf:"varint,4,opt,name=Expire,proto3" json:"Expire,omitempty"` // 过期时间
}

func (x *VodUpdateDomainExpireV2Request) Reset() {
	*x = VodUpdateDomainExpireV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateDomainExpireV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateDomainExpireV2Request) ProtoMessage() {}

func (x *VodUpdateDomainExpireV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateDomainExpireV2Request.ProtoReflect.Descriptor instead.
func (*VodUpdateDomainExpireV2Request) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{76}
}

func (x *VodUpdateDomainExpireV2Request) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateDomainExpireV2Request) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodUpdateDomainExpireV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodUpdateDomainExpireV2Request) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type VodUpdateDomainAuthConfigV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName  string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	DomainType string `protobuf:"bytes,2,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	Domain     string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	MainKey    string `protobuf:"bytes,4,opt,name=MainKey,proto3" json:"MainKey,omitempty"`
	BackupKey  string `protobuf:"bytes,5,opt,name=BackupKey,proto3" json:"BackupKey,omitempty"`
	Status     string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *VodUpdateDomainAuthConfigV2Request) Reset() {
	*x = VodUpdateDomainAuthConfigV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdateDomainAuthConfigV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdateDomainAuthConfigV2Request) ProtoMessage() {}

func (x *VodUpdateDomainAuthConfigV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdateDomainAuthConfigV2Request.ProtoReflect.Descriptor instead.
func (*VodUpdateDomainAuthConfigV2Request) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{77}
}

func (x *VodUpdateDomainAuthConfigV2Request) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdateDomainAuthConfigV2Request) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *VodUpdateDomainAuthConfigV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodUpdateDomainAuthConfigV2Request) GetMainKey() string {
	if x != nil {
		return x.MainKey
	}
	return ""
}

func (x *VodUpdateDomainAuthConfigV2Request) GetBackupKey() string {
	if x != nil {
		return x.BackupKey
	}
	return ""
}

func (x *VodUpdateDomainAuthConfigV2Request) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddOrUpdateCertificateV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName     string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
	DomainType    string `protobuf:"bytes,3,opt,name=DomainType,proto3" json:"DomainType,omitempty"`
	CertificateId string `protobuf:"bytes,4,opt,name=CertificateId,proto3" json:"CertificateId,omitempty"` //证书ID
	HttpsStatus   string `protobuf:"bytes,5,opt,name=HttpsStatus,proto3" json:"HttpsStatus,omitempty"`
}

func (x *AddOrUpdateCertificateV2Request) Reset() {
	*x = AddOrUpdateCertificateV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateCertificateV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateCertificateV2Request) ProtoMessage() {}

func (x *AddOrUpdateCertificateV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateCertificateV2Request.ProtoReflect.Descriptor instead.
func (*AddOrUpdateCertificateV2Request) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{78}
}

func (x *AddOrUpdateCertificateV2Request) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *AddOrUpdateCertificateV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AddOrUpdateCertificateV2Request) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *AddOrUpdateCertificateV2Request) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *AddOrUpdateCertificateV2Request) GetHttpsStatus() string {
	if x != nil {
		return x.HttpsStatus
	}
	return ""
}

// **********************************************************************
// 回调管理
// **********************************************************************
type VodAddCallbackSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 订阅URL
	Url string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	// 添加订阅地址的内容类型。默认值为“application/octet-stream”。支持的取值为
	// "application/json",
	// "application/octet-stream"
	ContentType string `protobuf:"bytes,3,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
}

func (x *VodAddCallbackSubscriptionRequest) Reset() {
	*x = VodAddCallbackSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAddCallbackSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAddCallbackSubscriptionRequest) ProtoMessage() {}

func (x *VodAddCallbackSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAddCallbackSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*VodAddCallbackSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{79}
}

func (x *VodAddCallbackSubscriptionRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodAddCallbackSubscriptionRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VodAddCallbackSubscriptionRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type VodSetCallbackEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 空间名
	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	// 事件列表
	Events string `protobuf:"bytes,2,opt,name=Events,proto3" json:"Events,omitempty"`
	// 是否开启回调鉴权,值为VodCallbackAuthType中的枚举数字
	AuthEnabled string `protobuf:"bytes,3,opt,name=AuthEnabled,proto3" json:"AuthEnabled,omitempty"`
	// 回调鉴权key
	PrivateKey string `protobuf:"bytes,4,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
}

func (x *VodSetCallbackEventRequest) Reset() {
	*x = VodSetCallbackEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSetCallbackEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSetCallbackEventRequest) ProtoMessage() {}

func (x *VodSetCallbackEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSetCallbackEventRequest.ProtoReflect.Descriptor instead.
func (*VodSetCallbackEventRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{80}
}

func (x *VodSetCallbackEventRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSetCallbackEventRequest) GetEvents() string {
	if x != nil {
		return x.Events
	}
	return ""
}

func (x *VodSetCallbackEventRequest) GetAuthEnabled() string {
	if x != nil {
		return x.AuthEnabled
	}
	return ""
}

func (x *VodSetCallbackEventRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// **********************************************************************
// 智能策略-轻量版
// **********************************************************************
type VodGetSmartStrategyLitePlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 播放url
	PlayUrl string `protobuf:"bytes,1,opt,name=PlayUrl,proto3" json:"PlayUrl,omitempty"`
	// 封装格式，支持mp4,dash,hls，默认mp4Format
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`
	// 编码类型，默认h264，可选值为h264,bytevc1等Codec
	Codec string `protobuf:"bytes,3,opt,name=Codec,proto3" json:"Codec,omitempty"`
	// 视频流清晰度，默认返回全部，支持：240p，360p，480p，540p，720p，1080p,
	// 2k, 4k
	Definition string `protobuf:"bytes,4,opt,name=Definition,proto3" json:"Definition,omitempty"`
	// 流文件类型，默认video，支持：加密视频流evideo，加密音频流传eaudio，非加密视频流video，普通音频音频流audio
	FileType string `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`
	// 水印贴片标签
	LogoType string `protobuf:"bytes,6,opt,name=LogoType,proto3" json:"LogoType,omitempty"`
	// 返回https播放地址，默认否, 1-是；0-否
	Ssl string `protobuf:"bytes,7,opt,name=Ssl,proto3" json:"Ssl,omitempty"`
	// 是否需要雪碧图（缩略图），默认否，1-是；0-否
	NeedThumbs string `protobuf:"bytes,8,opt,name=NeedThumbs,proto3" json:"NeedThumbs,omitempty"`
	// 是否需要蒙版弹幕，默认否，1-是；0-否
	NeedBarrageMask string `protobuf:"bytes,9,opt,name=NeedBarrageMask,proto3" json:"NeedBarrageMask,omitempty"`
	// 唯一性标识信息
	UnionInfo string `protobuf:"bytes,10,opt,name=UnionInfo,proto3" json:"UnionInfo,omitempty"`
	// HDR清晰度，默认不查询，支持：all,
	// 240p，360p, 420p，480p，540p，720p，1080p, 2k, 4k, od, oe
	HDRDefinition string `protobuf:"bytes,11,opt,name=HDRDefinition,proto3" json:"HDRDefinition,omitempty"`
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) Reset() {
	*x = VodGetSmartStrategyLitePlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetSmartStrategyLitePlayInfoRequest) ProtoMessage() {}

func (x *VodGetSmartStrategyLitePlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetSmartStrategyLitePlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetSmartStrategyLitePlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{81}
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetPlayUrl() string {
	if x != nil {
		return x.PlayUrl
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetNeedThumbs() string {
	if x != nil {
		return x.NeedThumbs
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetNeedBarrageMask() string {
	if x != nil {
		return x.NeedBarrageMask
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetUnionInfo() string {
	if x != nil {
		return x.UnionInfo
	}
	return ""
}

func (x *VodGetSmartStrategyLitePlayInfoRequest) GetHDRDefinition() string {
	if x != nil {
		return x.HDRDefinition
	}
	return ""
}

type VodGetAppInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// appCloud应用ID
	AppId uint64 `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
}

func (x *VodGetAppInfoRequest) Reset() {
	*x = VodGetAppInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetAppInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetAppInfoRequest) ProtoMessage() {}

func (x *VodGetAppInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetAppInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetAppInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{82}
}

func (x *VodGetAppInfoRequest) GetAppId() uint64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// **********************************************************************
// 计量计费
// **********************************************************************
// 转码用量
type DescribeVodSpaceTranscodeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList       string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"`             // 空间列表，多个空间用逗号分割
	StartTime       string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 查询的起始时间, rfc3339
	EndTime         string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	TranscodeType   string `protobuf:"bytes,4,opt,name=TranscodeType,proto3" json:"TranscodeType,omitempty"`     // 转码类型：默认全部。Slice，Normal，LowCost，ByteHD
	Specification   string `protobuf:"bytes,5,opt,name=Specification,proto3" json:"Specification,omitempty"`     //
	TaskStageList   string `protobuf:"bytes,6,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"`     // 闲忙时: busy/free，多个值用逗号分割
	Aggregation     int64  `protobuf:"varint,7,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,8,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：TaskStage、Space，多个值用逗号分割
}

func (x *DescribeVodSpaceTranscodeDataRequest) Reset() {
	*x = DescribeVodSpaceTranscodeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceTranscodeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceTranscodeDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceTranscodeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceTranscodeDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceTranscodeDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{83}
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetTranscodeType() string {
	if x != nil {
		return x.TranscodeType
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodSpaceTranscodeDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 媒体AI用量
type DescribeVodSpaceAIStatisDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"` // 空间列表，多个空间用逗号分割
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	// 类型：默认全部。VideoClassification(视频分类)，AIVideoSummary(精彩剪辑)，BarrageMask(蒙版弹幕)
	MediaAiType     string `protobuf:"bytes,4,opt,name=MediaAiType,proto3" json:"MediaAiType,omitempty"`
	TaskStageList   string `protobuf:"bytes,5,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"`     // 闲忙时: busy/free，多个值用逗号分割
	Aggregation     int64  `protobuf:"varint,6,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,7,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：TaskStage、Space，多个值用逗号分割
}

func (x *DescribeVodSpaceAIStatisDataRequest) Reset() {
	*x = DescribeVodSpaceAIStatisDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceAIStatisDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceAIStatisDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceAIStatisDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceAIStatisDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceAIStatisDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{84}
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetMediaAiType() string {
	if x != nil {
		return x.MediaAiType
	}
	return ""
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodSpaceAIStatisDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 智能字幕用量
type DescribeVodSpaceSubtitleStatisDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList       string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"`             // 空间列表，多个空间用逗号分割
	StartTime       string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 查询的起始时间, rfc3339
	EndTime         string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	SubtitleType    string `protobuf:"bytes,4,opt,name=SubtitleType,proto3" json:"SubtitleType,omitempty"`       // 类型：默认全部。ASR(语音转写)，MT(机器翻译)，ES(提取字幕)
	TaskStageList   string `protobuf:"bytes,5,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"`     // 闲忙时: busy/free，多个值用逗号分割
	Aggregation     int64  `protobuf:"varint,6,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        // 聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,7,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：TaskStage、Space，多个值用逗号分割
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) Reset() {
	*x = DescribeVodSpaceSubtitleStatisDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceSubtitleStatisDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceSubtitleStatisDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceSubtitleStatisDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{85}
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetSubtitleType() string {
	if x != nil {
		return x.SubtitleType
	}
	return ""
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodSpaceSubtitleStatisDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 检测修复用量
type DescribeVodSpaceDetectStatisDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"` // 空间列表，多个空间用逗号分割
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	// 类型：默认全部。VQScore，WatermarkDetect(水印检测)，WatermarkEraser(水印擦除)，PatchDetect(贴片检测)，PatchEraser(贴片擦除)，BlackFrameDetect(黑帧检测)，BlackFrameEraser(黑帧擦除)
	DetectType      string `protobuf:"bytes,4,opt,name=DetectType,proto3" json:"DetectType,omitempty"`
	TaskStageList   string `protobuf:"bytes,5,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"`     // 闲忙时: busy/free，多个值用逗号分割
	Aggregation     int64  `protobuf:"varint,6,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,7,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：TaskStage、Space，多个值用逗号分割
}

func (x *DescribeVodSpaceDetectStatisDataRequest) Reset() {
	*x = DescribeVodSpaceDetectStatisDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceDetectStatisDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceDetectStatisDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceDetectStatisDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceDetectStatisDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceDetectStatisDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{86}
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetDetectType() string {
	if x != nil {
		return x.DetectType
	}
	return ""
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodSpaceDetectStatisDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 点播截图用量
type DescribeVodSnapshotDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList       string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"`             // 空间列表，多个空间用逗号分割
	StartTime       string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 查询的起始时间, rfc3339
	EndTime         string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	SnapshotType    string `protobuf:"bytes,4,opt,name=SnapshotType,proto3" json:"SnapshotType,omitempty"`       //类型：默认全部。Poster（静态图）、Sample（采样截图）、Dynpost（动图）、Animated（反复循环图）、AIDynpost（AI动图）、Sprite（雪碧图）
	TaskStageList   string `protobuf:"bytes,5,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"`     // 闲忙时: busy/free，多个值用逗号分割
	Aggregation     int64  `protobuf:"varint,6,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,7,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：TaskStage、Space，多个值用逗号分割
}

func (x *DescribeVodSnapshotDataRequest) Reset() {
	*x = DescribeVodSnapshotDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSnapshotDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSnapshotDataRequest) ProtoMessage() {}

func (x *DescribeVodSnapshotDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSnapshotDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSnapshotDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{87}
}

func (x *DescribeVodSnapshotDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSnapshotDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSnapshotDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSnapshotDataRequest) GetSnapshotType() string {
	if x != nil {
		return x.SnapshotType
	}
	return ""
}

func (x *DescribeVodSnapshotDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodSnapshotDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodSnapshotDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 工作流明细
type DescribeVodSpaceWorkflowDetailDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=Region,proto3" json:"Region,omitempty"`       //地区，如：cn-north-1
	Space     string `protobuf:"bytes,2,opt,name=Space,proto3" json:"Space,omitempty"`         // 空间
	StartTime string `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；起止时间间隔不超过1天
	PageSize  int64  `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`  // 分页查询的页大小，默认100
	PageNum   int64  `protobuf:"varint,6,opt,name=PageNum,proto3" json:"PageNum,omitempty"`    // 分页查询的页号，默认1
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) Reset() {
	*x = DescribeVodSpaceWorkflowDetailDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceWorkflowDetailDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceWorkflowDetailDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceWorkflowDetailDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{88}
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeVodSpaceWorkflowDetailDataRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 点播编辑明细
type DescribeVodSpaceEditDetailDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=Region,proto3" json:"Region,omitempty"`       //地区，如：cn-north-1
	Space     string `protobuf:"bytes,2,opt,name=Space,proto3" json:"Space,omitempty"`         // 空间
	StartTime string `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；起止时间间隔不超过1天
	PageSize  int64  `protobuf:"varint,5,opt,name=PageSize,proto3" json:"PageSize,omitempty"`  // 分页查询的页大小，默认100
	PageNum   int64  `protobuf:"varint,6,opt,name=PageNum,proto3" json:"PageNum,omitempty"`    // 分页查询的页号，默认1
}

func (x *DescribeVodSpaceEditDetailDataRequest) Reset() {
	*x = DescribeVodSpaceEditDetailDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceEditDetailDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceEditDetailDataRequest) ProtoMessage() {}

func (x *DescribeVodSpaceEditDetailDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceEditDetailDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceEditDetailDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{89}
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeVodSpaceEditDetailDataRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 点播文件域名粒度播放统计信息下载
type DescribeVodPlayFileLogByDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  string `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`   // 查询的起始时间, rfc3339格式, 最早查询1年内的数据
	EndTime    string `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 查询的结束时间, rfc3339；起止时间间隔不超过93天
	DomainList string `protobuf:"bytes,3,opt,name=DomainList,proto3" json:"DomainList,omitempty"` // 查询域名列表, 有多个时使用英文逗号分隔
}

func (x *DescribeVodPlayFileLogByDomainRequest) Reset() {
	*x = DescribeVodPlayFileLogByDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodPlayFileLogByDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodPlayFileLogByDomainRequest) ProtoMessage() {}

func (x *DescribeVodPlayFileLogByDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodPlayFileLogByDomainRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodPlayFileLogByDomainRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{90}
}

func (x *DescribeVodPlayFileLogByDomainRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodPlayFileLogByDomainRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodPlayFileLogByDomainRequest) GetDomainList() string {
	if x != nil {
		return x.DomainList
	}
	return ""
}

// 存储用量小时延迟数据-定制化
type DescribeVodSpaceStorageDataFDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"` // 空间列表
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；查询时间跨度不超过31天
}

func (x *DescribeVodSpaceStorageDataFDRequest) Reset() {
	*x = DescribeVodSpaceStorageDataFDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodSpaceStorageDataFDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodSpaceStorageDataFDRequest) ProtoMessage() {}

func (x *DescribeVodSpaceStorageDataFDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodSpaceStorageDataFDRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodSpaceStorageDataFDRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{91}
}

func (x *DescribeVodSpaceStorageDataFDRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodSpaceStorageDataFDRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodSpaceStorageDataFDRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// 点播画质增强用量
type DescribeVodEnhanceImageDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList    string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"`       // 空间列表，多个空间用逗号分割
	StartTime    string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`       // 查询的起始时间, rfc3339
	EndTime      string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`           // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	TaskTypeList string `protobuf:"bytes,4,opt,name=TaskTypeList,proto3" json:"TaskTypeList,omitempty"` //类型：默认全部。SR（智能超分），VFI（插帧），SDREnhance（SDR
	// 增强），SDR2HDR（SDR 转 HDR），AudioDenoise（音频降噪）
	TaskStageList string `protobuf:"bytes,5,opt,name=TaskStageList,proto3" json:"TaskStageList,omitempty"` // 闲忙时: busy/free，多个值用逗号分割
	Aggregation   int64  `protobuf:"varint,6,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`    //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	RegionList    string `protobuf:"bytes,7,opt,name=RegionList,proto3" json:"RegionList,omitempty"`       // 区域，多个区域用逗号分割
}

func (x *DescribeVodEnhanceImageDataRequest) Reset() {
	*x = DescribeVodEnhanceImageDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodEnhanceImageDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodEnhanceImageDataRequest) ProtoMessage() {}

func (x *DescribeVodEnhanceImageDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodEnhanceImageDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodEnhanceImageDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{92}
}

func (x *DescribeVodEnhanceImageDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodEnhanceImageDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodEnhanceImageDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodEnhanceImageDataRequest) GetTaskTypeList() string {
	if x != nil {
		return x.TaskTypeList
	}
	return ""
}

func (x *DescribeVodEnhanceImageDataRequest) GetTaskStageList() string {
	if x != nil {
		return x.TaskStageList
	}
	return ""
}

func (x *DescribeVodEnhanceImageDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodEnhanceImageDataRequest) GetRegionList() string {
	if x != nil {
		return x.RegionList
	}
	return ""
}

// 查询视频播放信息
type DescribeVodPlayedStatisDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space     string `protobuf:"bytes,1,opt,name=Space,proto3" json:"Space,omitempty"`         // 空间
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	VidList   string `protobuf:"bytes,4,opt,name=VidList,proto3" json:"VidList,omitempty"`     // 查询的Vid列表，多个Vid用逗号分割
	OrderType string `protobuf:"bytes,5,opt,name=OrderType,proto3" json:"OrderType,omitempty"` // 排序类型
}

func (x *DescribeVodPlayedStatisDataRequest) Reset() {
	*x = DescribeVodPlayedStatisDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodPlayedStatisDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodPlayedStatisDataRequest) ProtoMessage() {}

func (x *DescribeVodPlayedStatisDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodPlayedStatisDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodPlayedStatisDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{93}
}

func (x *DescribeVodPlayedStatisDataRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *DescribeVodPlayedStatisDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodPlayedStatisDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodPlayedStatisDataRequest) GetVidList() string {
	if x != nil {
		return x.VidList
	}
	return ""
}

func (x *DescribeVodPlayedStatisDataRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

// 查询播放 TopN 的视频
type DescribeVodMostPlayedStatisDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space     string `protobuf:"bytes,1,opt,name=Space,proto3" json:"Space,omitempty"`         // 空间
	StartTime string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"` // 查询的起始时间, rfc3339
	EndTime   string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	OrderType string `protobuf:"bytes,4,opt,name=OrderType,proto3" json:"OrderType,omitempty"` // 排序类型
	TopN      int64  `protobuf:"varint,5,opt,name=TopN,proto3" json:"TopN,omitempty"`          // 返回视频的个数。默认值为 100。最大为 100。
}

func (x *DescribeVodMostPlayedStatisDataRequest) Reset() {
	*x = DescribeVodMostPlayedStatisDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodMostPlayedStatisDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodMostPlayedStatisDataRequest) ProtoMessage() {}

func (x *DescribeVodMostPlayedStatisDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodMostPlayedStatisDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodMostPlayedStatisDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{94}
}

func (x *DescribeVodMostPlayedStatisDataRequest) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *DescribeVodMostPlayedStatisDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodMostPlayedStatisDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodMostPlayedStatisDataRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *DescribeVodMostPlayedStatisDataRequest) GetTopN() int64 {
	if x != nil {
		return x.TopN
	}
	return 0
}

// 点播实时处理用量
type DescribeVodRealtimeMediaDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceList       string `protobuf:"bytes,1,opt,name=SpaceList,proto3" json:"SpaceList,omitempty"`             // 空间列表，多个空间用逗号分割
	StartTime       string `protobuf:"bytes,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`             // 查询的起始时间, rfc3339
	EndTime         string `protobuf:"bytes,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                 // 查询的结束时间, rfc3339；查询时间跨度不超过93天
	ProcessType     string `protobuf:"bytes,4,opt,name=ProcessType,proto3" json:"ProcessType,omitempty"`         // 实时处理类型。默认为全选。Snapshot（实时截图）、Metadata（实时获取音视频信息）
	Aggregation     int64  `protobuf:"varint,5,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`        //聚合的时间粒度，单位秒，默认3600，支持3600和86400
	DetailFieldList string `protobuf:"bytes,6,opt,name=DetailFieldList,proto3" json:"DetailFieldList,omitempty"` // 展示详细信息的维度，取值：Space，多个值用逗号分割
}

func (x *DescribeVodRealtimeMediaDataRequest) Reset() {
	*x = DescribeVodRealtimeMediaDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVodRealtimeMediaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVodRealtimeMediaDataRequest) ProtoMessage() {}

func (x *DescribeVodRealtimeMediaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVodRealtimeMediaDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVodRealtimeMediaDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{95}
}

func (x *DescribeVodRealtimeMediaDataRequest) GetSpaceList() string {
	if x != nil {
		return x.SpaceList
	}
	return ""
}

func (x *DescribeVodRealtimeMediaDataRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DescribeVodRealtimeMediaDataRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DescribeVodRealtimeMediaDataRequest) GetProcessType() string {
	if x != nil {
		return x.ProcessType
	}
	return ""
}

func (x *DescribeVodRealtimeMediaDataRequest) GetAggregation() int64 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *DescribeVodRealtimeMediaDataRequest) GetDetailFieldList() string {
	if x != nil {
		return x.DetailFieldList
	}
	return ""
}

// 媒资封禁相关
type VodSubmitBlockMediaTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"` //空间名
	Vids      string `protobuf:"bytes,2,opt,name=Vids,proto3" json:"Vids,omitempty"`           // Vid列表，以,隔开
}

func (x *VodSubmitBlockMediaTaskRequest) Reset() {
	*x = VodSubmitBlockMediaTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubmitBlockMediaTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubmitBlockMediaTaskRequest) ProtoMessage() {}

func (x *VodSubmitBlockMediaTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubmitBlockMediaTaskRequest.ProtoReflect.Descriptor instead.
func (*VodSubmitBlockMediaTaskRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{96}
}

func (x *VodSubmitBlockMediaTaskRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSubmitBlockMediaTaskRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type VodSubmitUnblockMediaTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"` //空间名
	Vids      string `protobuf:"bytes,2,opt,name=Vids,proto3" json:"Vids,omitempty"`           // Vid列表，以,隔开
}

func (x *VodSubmitUnblockMediaTaskRequest) Reset() {
	*x = VodSubmitUnblockMediaTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubmitUnblockMediaTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubmitUnblockMediaTaskRequest) ProtoMessage() {}

func (x *VodSubmitUnblockMediaTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubmitUnblockMediaTaskRequest.ProtoReflect.Descriptor instead.
func (*VodSubmitUnblockMediaTaskRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{97}
}

func (x *VodSubmitUnblockMediaTaskRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSubmitUnblockMediaTaskRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type VodQueryMediaBlockStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"` //空间名
	Vids      string `protobuf:"bytes,2,opt,name=Vids,proto3" json:"Vids,omitempty"`           // Vid列表，以,隔开
}

func (x *VodQueryMediaBlockStatusRequest) Reset() {
	*x = VodQueryMediaBlockStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodQueryMediaBlockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodQueryMediaBlockStatusRequest) ProtoMessage() {}

func (x *VodQueryMediaBlockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodQueryMediaBlockStatusRequest.ProtoReflect.Descriptor instead.
func (*VodQueryMediaBlockStatusRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{98}
}

func (x *VodQueryMediaBlockStatusRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodQueryMediaBlockStatusRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

// **********************************************************************
// 播放列表
// **********************************************************************
type VodCreatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName  string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`             // 播放列表名
	Format     string `protobuf:"bytes,3,opt,name=Format,proto3" json:"Format,omitempty"`         // 封装格式，支持 mp4、dash、hls、mp3、m4a、ogg, 默认mp4
	Codec      string `protobuf:"bytes,4,opt,name=Codec,proto3" json:"Codec,omitempty"`           // 编码格式，支持 mp3、aac、opus、H264、H265、H266, 视频默认H264
	Definition string `protobuf:"bytes,5,opt,name=Definition,proto3" json:"Definition,omitempty"` // 视频流清晰度，支持：240p,360p,480p,540p,720p,1080p,2k,4k,od,oe.
	Vids       string `protobuf:"bytes,6,opt,name=Vids,proto3" json:"Vids,omitempty"`             // 以,分隔，最多100个
	StartTime  string `protobuf:"bytes,7,opt,name=StartTime,proto3" json:"StartTime,omitempty"`   // 以秒为单位的时间戳
	EndTime    string `protobuf:"bytes,8,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 以秒为单位的时间戳，大于StartTime
	Cycles     string `protobuf:"bytes,9,opt,name=Cycles,proto3" json:"Cycles,omitempty"`         // 0代表无限循环，默认为0
}

func (x *VodCreatePlaylistRequest) Reset() {
	*x = VodCreatePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreatePlaylistRequest) ProtoMessage() {}

func (x *VodCreatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*VodCreatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{99}
}

func (x *VodCreatePlaylistRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodCreatePlaylistRequest) GetCycles() string {
	if x != nil {
		return x.Cycles
	}
	return ""
}

type VodGetPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Ids       string `protobuf:"bytes,2,opt,name=Ids,proto3" json:"Ids,omitempty"` // 以,分隔
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Limit     uint32 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset    uint32 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *VodGetPlaylistsRequest) Reset() {
	*x = VodGetPlaylistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlaylistsRequest) ProtoMessage() {}

func (x *VodGetPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*VodGetPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{100}
}

func (x *VodGetPlaylistsRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodGetPlaylistsRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *VodGetPlaylistsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VodGetPlaylistsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VodGetPlaylistsRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type VodUpdatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName  string                  `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Id         string                  `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"` // 播放列表Id
	Name       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Format     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=Format,proto3" json:"Format,omitempty"`         // 封装格式，支持 mp4、dash、hls、mp3、m4a、ogg, 默认mp4
	Codec      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=Codec,proto3" json:"Codec,omitempty"`           // 编码格式，支持 mp3、aac、opus、H264、H265、H266, 视频默认H264
	Definition *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=Definition,proto3" json:"Definition,omitempty"` // 视频流清晰度，支持：240p,360p,480p,540p,720p,1080p,2k,4k,od,oe.
	Vids       *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=Vids,proto3" json:"Vids,omitempty"`             // 以,分隔，最多100个
	StartTime  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`   // 以秒为单位的时间戳
	EndTime    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 以秒为单位的时间戳，大于StartTime
	Cycles     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=Cycles,proto3" json:"Cycles,omitempty"`        // 0代表无限循环
}

func (x *VodUpdatePlaylistRequest) Reset() {
	*x = VodUpdatePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUpdatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUpdatePlaylistRequest) ProtoMessage() {}

func (x *VodUpdatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUpdatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*VodUpdatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{101}
}

func (x *VodUpdatePlaylistRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUpdatePlaylistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VodUpdatePlaylistRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetCodec() *wrapperspb.StringValue {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetDefinition() *wrapperspb.StringValue {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetVids() *wrapperspb.StringValue {
	if x != nil {
		return x.Vids
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetStartTime() *wrapperspb.StringValue {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetEndTime() *wrapperspb.StringValue {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *VodUpdatePlaylistRequest) GetCycles() *wrapperspb.StringValue {
	if x != nil {
		return x.Cycles
	}
	return nil
}

type VodDeletePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *VodDeletePlaylistRequest) Reset() {
	*x = VodDeletePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeletePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeletePlaylistRequest) ProtoMessage() {}

func (x *VodDeletePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeletePlaylistRequest.ProtoReflect.Descriptor instead.
func (*VodDeletePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{102}
}

func (x *VodDeletePlaylistRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodDeletePlaylistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// **********************************************************************
// 商业DRM
// **********************************************************************
type VodSetIntertrustApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	ApiKey    string `protobuf:"bytes,2,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
}

func (x *VodSetIntertrustApiKeyRequest) Reset() {
	*x = VodSetIntertrustApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSetIntertrustApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSetIntertrustApiKeyRequest) ProtoMessage() {}

func (x *VodSetIntertrustApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSetIntertrustApiKeyRequest.ProtoReflect.Descriptor instead.
func (*VodSetIntertrustApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{103}
}

func (x *VodSetIntertrustApiKeyRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSetIntertrustApiKeyRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type VodGetIntertrustApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodGetIntertrustApiKeyRequest) Reset() {
	*x = VodGetIntertrustApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetIntertrustApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetIntertrustApiKeyRequest) ProtoMessage() {}

func (x *VodGetIntertrustApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetIntertrustApiKeyRequest.ProtoReflect.Descriptor instead.
func (*VodGetIntertrustApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{104}
}

func (x *VodGetIntertrustApiKeyRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodDeleteIntertrustApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodDeleteIntertrustApiKeyRequest) Reset() {
	*x = VodDeleteIntertrustApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteIntertrustApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteIntertrustApiKeyRequest) ProtoMessage() {}

func (x *VodDeleteIntertrustApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteIntertrustApiKeyRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteIntertrustApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{105}
}

func (x *VodDeleteIntertrustApiKeyRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodSetFairPlayCertInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName    string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	CertName     string `protobuf:"bytes,2,opt,name=CertName,proto3" json:"CertName,omitempty"`
	CertFile     string `protobuf:"bytes,3,opt,name=CertFile,proto3" json:"CertFile,omitempty"`
	PkFile       string `protobuf:"bytes,4,opt,name=PkFile,proto3" json:"PkFile,omitempty"`
	CertFileName string `protobuf:"bytes,5,opt,name=CertFileName,proto3" json:"CertFileName,omitempty"`
	PkFileName   string `protobuf:"bytes,6,opt,name=PkFileName,proto3" json:"PkFileName,omitempty"`
	PkPassword   string `protobuf:"bytes,7,opt,name=PkPassword,proto3" json:"PkPassword,omitempty"`
	Ask          string `protobuf:"bytes,8,opt,name=Ask,proto3" json:"Ask,omitempty"`
}

func (x *VodSetFairPlayCertInfoRequest) Reset() {
	*x = VodSetFairPlayCertInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSetFairPlayCertInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSetFairPlayCertInfoRequest) ProtoMessage() {}

func (x *VodSetFairPlayCertInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSetFairPlayCertInfoRequest.ProtoReflect.Descriptor instead.
func (*VodSetFairPlayCertInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{106}
}

func (x *VodSetFairPlayCertInfoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetPkFile() string {
	if x != nil {
		return x.PkFile
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetCertFileName() string {
	if x != nil {
		return x.CertFileName
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetPkFileName() string {
	if x != nil {
		return x.PkFileName
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetPkPassword() string {
	if x != nil {
		return x.PkPassword
	}
	return ""
}

func (x *VodSetFairPlayCertInfoRequest) GetAsk() string {
	if x != nil {
		return x.Ask
	}
	return ""
}

type VodGetFairPlayCertInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodGetFairPlayCertInfoRequest) Reset() {
	*x = VodGetFairPlayCertInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetFairPlayCertInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetFairPlayCertInfoRequest) ProtoMessage() {}

func (x *VodGetFairPlayCertInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetFairPlayCertInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetFairPlayCertInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{107}
}

func (x *VodGetFairPlayCertInfoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodDeleteFairPlayCertInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
}

func (x *VodDeleteFairPlayCertInfoRequest) Reset() {
	*x = VodDeleteFairPlayCertInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteFairPlayCertInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteFairPlayCertInfoRequest) ProtoMessage() {}

func (x *VodDeleteFairPlayCertInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteFairPlayCertInfoRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteFairPlayCertInfoRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{108}
}

func (x *VodDeleteFairPlayCertInfoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type VodGetFairPlayCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertId string `protobuf:"bytes,1,opt,name=CertId,proto3" json:"CertId,omitempty"`
}

func (x *VodGetFairPlayCertRequest) Reset() {
	*x = VodGetFairPlayCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetFairPlayCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetFairPlayCertRequest) ProtoMessage() {}

func (x *VodGetFairPlayCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetFairPlayCertRequest.ProtoReflect.Descriptor instead.
func (*VodGetFairPlayCertRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{109}
}

func (x *VodGetFairPlayCertRequest) GetCertId() string {
	if x != nil {
		return x.CertId
	}
	return ""
}

type VodGetDrmLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid               string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`
	Kid               string `protobuf:"bytes,2,opt,name=Kid,proto3" json:"Kid,omitempty"`
	ThirdPartyDrmType string `protobuf:"bytes,3,opt,name=ThirdPartyDrmType,proto3" json:"ThirdPartyDrmType,omitempty"`
}

func (x *VodGetDrmLicenseRequest) Reset() {
	*x = VodGetDrmLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetDrmLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetDrmLicenseRequest) ProtoMessage() {}

func (x *VodGetDrmLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetDrmLicenseRequest.ProtoReflect.Descriptor instead.
func (*VodGetDrmLicenseRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{110}
}

func (x *VodGetDrmLicenseRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetDrmLicenseRequest) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *VodGetDrmLicenseRequest) GetThirdPartyDrmType() string {
	if x != nil {
		return x.ThirdPartyDrmType
	}
	return ""
}

// **********************************************************************
// 镜像回源
// **********************************************************************
type VodSetMirrorSrcRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName     string                  `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Id            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"` // 不传id为创建镜像回源规则,传id为更新镜像回源规则,更新时,不允许更新来源域名
	MirrorSrcRule *business.MirrorSrcRule `protobuf:"bytes,3,opt,name=MirrorSrcRule,proto3" json:"MirrorSrcRule,omitempty"`
}

func (x *VodSetMirrorSrcRuleRequest) Reset() {
	*x = VodSetMirrorSrcRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSetMirrorSrcRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSetMirrorSrcRuleRequest) ProtoMessage() {}

func (x *VodSetMirrorSrcRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSetMirrorSrcRuleRequest.ProtoReflect.Descriptor instead.
func (*VodSetMirrorSrcRuleRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{111}
}

func (x *VodSetMirrorSrcRuleRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodSetMirrorSrcRuleRequest) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VodSetMirrorSrcRuleRequest) GetMirrorSrcRule() *business.MirrorSrcRule {
	if x != nil {
		return x.MirrorSrcRule
	}
	return nil
}

type VodDeleteMirrorSrcRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *VodDeleteMirrorSrcRuleRequest) Reset() {
	*x = VodDeleteMirrorSrcRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDeleteMirrorSrcRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDeleteMirrorSrcRuleRequest) ProtoMessage() {}

func (x *VodDeleteMirrorSrcRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDeleteMirrorSrcRuleRequest.ProtoReflect.Descriptor instead.
func (*VodDeleteMirrorSrcRuleRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{112}
}

func (x *VodDeleteMirrorSrcRuleRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodDeleteMirrorSrcRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VodListMirrorSrcRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *VodListMirrorSrcRuleRequest) Reset() {
	*x = VodListMirrorSrcRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListMirrorSrcRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListMirrorSrcRuleRequest) ProtoMessage() {}

func (x *VodListMirrorSrcRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListMirrorSrcRuleRequest.ProtoReflect.Descriptor instead.
func (*VodListMirrorSrcRuleRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{113}
}

func (x *VodListMirrorSrcRuleRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodListMirrorSrcRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// **********************************************************************
// 项目管理
// **********************************************************************
type VodListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VodListProjectsRequest) Reset() {
	*x = VodListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListProjectsRequest) ProtoMessage() {}

func (x *VodListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_vod_request_request_vod_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListProjectsRequest.ProtoReflect.Descriptor instead.
func (*VodListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_vod_request_request_vod_proto_rawDescGZIP(), []int{114}
}

var File_byteplus_vod_request_request_vod_proto protoreflect.FileDescriptor

var file_byteplus_vod_request_request_vod_proto_rawDesc = []byte{
	0x0a, 0x26, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2f,
	0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x80, 0x05, 0x0a, 0x18, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x65, 0x65,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x53, 0x73, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x64,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x64, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x44, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x72,
	0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x48, 0x44, 0x52, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x48, 0x44, 0x52, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4b, 0x65,
	0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4b, 0x65,
	0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x22, 0xfb, 0x04, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x73, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x64, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x64, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x48, 0x44, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x44, 0x52, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x44, 0x72, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x72, 0x6d, 0x4b, 0x45, 0x4b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x72,
	0x6d, 0x4b, 0x45, 0x4b, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x53, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x53, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x49,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x6b, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x48, 0x6c, 0x73, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x41, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x40, 0x0a,
	0x20, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6c, 0x73, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xdb, 0x01, 0x0a, 0x2b, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a,
	0x13, 0x56, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x52, 0x4c, 0x53, 0x65, 0x74, 0x52, 0x07, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x74, 0x73, 0x22, 0x37,
	0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x56, 0x6f, 0x64, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6,
	0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x55, 0x72,
	0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x56, 0x6f,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73,
	0x22, 0x4e, 0x0a, 0x22, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x21, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xd8, 0x02, 0x0a,
	0x19, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x47,
	0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56,
	0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x22, 0x6c, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x72, 0x67, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x16, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x6f,
	0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x73, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4d,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47,
	0x65, 0x74, 0x4d, 0x4c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x70, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e,
	0x65, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x65, 0x65, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x6f, 0x0a,
	0x21, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4e,
	0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x5f,
	0x0a, 0x2f, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x56, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0x58, 0x0a, 0x28, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x23, 0x56, 0x6f,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x23, 0x56, 0x6f,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x23, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x22, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69,
	0x64, 0x22, 0x7d, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x22, 0x32, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x69, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c,
	0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x21, 0x56,
	0x6f, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x1f, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4a,
	0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x3c, 0x0a, 0x24, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x1b, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x24, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe3, 0x01,
	0x0a, 0x23, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x72, 0x67, 0x73, 0x22, 0x37, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x71, 0x49, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x1f,
	0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x18, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x13, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x81, 0x01, 0x0a, 0x21, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x25, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x56, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x25, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xa4,
	0x01, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x23, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x64, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x1e,
	0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x64, 0x6e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x72, 0x6c, 0x73,
	0x22, 0xa4, 0x02, 0x0a, 0x16, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x56,
	0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb2,
	0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0xde, 0x01, 0x0a, 0x28, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x41, 0x72, 0x65, 0x61, 0x22, 0xac, 0x03, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x64, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e,
	0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x49, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x22, 0x72, 0x0a, 0x20, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x56, 0x6f, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x73, 0x0a, 0x21, 0x56, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x18, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x70, 0x73, 0x22, 0xf3, 0x01, 0x0a,
	0x17, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x50, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64,
	0x6e, 0x48, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc4, 0x01,
	0x0a, 0x26, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x02, 0x0a,
	0x1e, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x18, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72,
	0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x1e, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x22, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a,
	0x1f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75,
	0x0a, 0x21, 0x56, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75,
	0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xe8, 0x02, 0x0a,
	0x26, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x73, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e,
	0x65, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x44, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x44, 0x52, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x56, 0x6f, 0x64, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x56, 0x6f, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x6f, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x29, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x56, 0x6f, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91,
	0x02, 0x0a, 0x27, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x6f, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xc7, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f,
	0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x25,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x7f, 0x0a, 0x25, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x7c, 0x0a, 0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f,
	0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x86, 0x02, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x56, 0x6f, 0x64, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x6f, 0x70, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x6f, 0x70,
	0x4e, 0x22, 0xe9, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x6f,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x1e, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64,
	0x73, 0x22, 0x54, 0x0a, 0x20, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x1f, 0x56, 0x6f, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x18, 0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x8a, 0x01,
	0x0a, 0x16, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xfe, 0x03, 0x0a, 0x18, 0x56,
	0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x56, 0x69, 0x64,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x56,
	0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x1d,
	0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x20, 0x56,
	0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x02,
	0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x41, 0x73, 0x6b, 0x22, 0x3d, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x46, 0x61, 0x69,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x40, 0x0a, 0x20, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x53, 0x65,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x72, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x0d, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x72, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x72,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x72, 0x63,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x72, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1b, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x72, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0xd4, 0x01, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xa0, 0x01, 0x01, 0xd8, 0x01,
	0x01, 0xca, 0x02, 0x23, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xe2, 0x02, 0x27, 0x42, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_byteplus_vod_request_request_vod_proto_rawDescOnce sync.Once
	file_byteplus_vod_request_request_vod_proto_rawDescData = file_byteplus_vod_request_request_vod_proto_rawDesc
)

func file_byteplus_vod_request_request_vod_proto_rawDescGZIP() []byte {
	file_byteplus_vod_request_request_vod_proto_rawDescOnce.Do(func() {
		file_byteplus_vod_request_request_vod_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_vod_request_request_vod_proto_rawDescData)
	})
	return file_byteplus_vod_request_request_vod_proto_rawDescData
}

var file_byteplus_vod_request_request_vod_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_byteplus_vod_request_request_vod_proto_goTypes = []interface{}{
	(*VodGetAllPlayInfoRequest)(nil),                        // 0: Byteplus.Vod.Models.Request.VodGetAllPlayInfoRequest
	(*VodGetPlayInfoRequest)(nil),                           // 1: Byteplus.Vod.Models.Request.VodGetPlayInfoRequest
	(*VodGetPrivateDrmPlayAuthRequest)(nil),                 // 2: Byteplus.Vod.Models.Request.VodGetPrivateDrmPlayAuthRequest
	(*VodGetHlsDecryptionKeyRequest)(nil),                   // 3: Byteplus.Vod.Models.Request.VodGetHlsDecryptionKeyRequest
	(*VodCreateHlsDecryptionKeyRequest)(nil),                // 4: Byteplus.Vod.Models.Request.VodCreateHlsDecryptionKeyRequest
	(*VodGetPlayInfoWithLiveTimeShiftSceneRequest)(nil),     // 5: Byteplus.Vod.Models.Request.VodGetPlayInfoWithLiveTimeShiftSceneRequest
	(*VodUrlUploadRequest)(nil),                             // 6: Byteplus.Vod.Models.Request.VodUrlUploadRequest
	(*VodQueryUploadTaskInfoRequest)(nil),                   // 7: Byteplus.Vod.Models.Request.VodQueryUploadTaskInfoRequest
	(*VodApplyUploadInfoRequest)(nil),                       // 8: Byteplus.Vod.Models.Request.VodApplyUploadInfoRequest
	(*VodUploadMediaRequest)(nil),                           // 9: Byteplus.Vod.Models.Request.VodUploadMediaRequest
	(*VodUploadMaterialRequest)(nil),                        // 10: Byteplus.Vod.Models.Request.VodUploadMaterialRequest
	(*VodCommitUploadInfoRequest)(nil),                      // 11: Byteplus.Vod.Models.Request.VodCommitUploadInfoRequest
	(*VodUrlUploadJsonRequest)(nil),                         // 12: Byteplus.Vod.Models.Request.VodUrlUploadJsonRequest
	(*VodGetRecommendedPosterRequest)(nil),                  // 13: Byteplus.Vod.Models.Request.VodGetRecommendedPosterRequest
	(*VodUpdateMediaPublishStatusRequest)(nil),              // 14: Byteplus.Vod.Models.Request.VodUpdateMediaPublishStatusRequest
	(*VodUpdateMediaStorageClassRequest)(nil),               // 15: Byteplus.Vod.Models.Request.VodUpdateMediaStorageClassRequest
	(*VodUpdateMediaInfoRequest)(nil),                       // 16: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest
	(*VodGetMediaInfosRequest)(nil),                         // 17: Byteplus.Vod.Models.Request.VodGetMediaInfosRequest
	(*VodDeleteMediaRequest)(nil),                           // 18: Byteplus.Vod.Models.Request.VodDeleteMediaRequest
	(*VodDeleteTranscodesRequest)(nil),                      // 19: Byteplus.Vod.Models.Request.VodDeleteTranscodesRequest
	(*VodGetMediaListRequest)(nil),                          // 20: Byteplus.Vod.Models.Request.VodGetMediaListRequest
	(*VodGetSubtitleInfoListRequest)(nil),                   // 21: Byteplus.Vod.Models.Request.VodGetSubtitleInfoListRequest
	(*VodUpdateSubtitleStatusRequest)(nil),                  // 22: Byteplus.Vod.Models.Request.VodUpdateSubtitleStatusRequest
	(*VodUpdateSubtitleInfoRequest)(nil),                    // 23: Byteplus.Vod.Models.Request.VodUpdateSubtitleInfoRequest
	(*VodGetAuditFramesForAuditRequest)(nil),                // 24: Byteplus.Vod.Models.Request.VodGetAuditFramesForAuditRequest
	(*VodGetMLFramesForAuditRequest)(nil),                   // 25: Byteplus.Vod.Models.Request.VodGetMLFramesForAuditRequest
	(*VodGetBetterFramesForAuditRequest)(nil),               // 26: Byteplus.Vod.Models.Request.VodGetBetterFramesForAuditRequest
	(*VodGetAudioInfoForAuditRequest)(nil),                  // 27: Byteplus.Vod.Models.Request.VodGetAudioInfoForAuditRequest
	(*VodGetAutomaticSpeechRecognitionForAuditRequest)(nil), // 28: Byteplus.Vod.Models.Request.VodGetAutomaticSpeechRecognitionForAuditRequest
	(*VodGetAudioEventDetectionForAuditRequest)(nil),        // 29: Byteplus.Vod.Models.Request.VodGetAudioEventDetectionForAuditRequest
	(*VodCreateVideoClassificationRequest)(nil),             // 30: Byteplus.Vod.Models.Request.VodCreateVideoClassificationRequest
	(*VodUpdateVideoClassificationRequest)(nil),             // 31: Byteplus.Vod.Models.Request.VodUpdateVideoClassificationRequest
	(*VodDeleteVideoClassificationRequest)(nil),             // 32: Byteplus.Vod.Models.Request.VodDeleteVideoClassificationRequest
	(*VodListVideoClassificationsRequest)(nil),              // 33: Byteplus.Vod.Models.Request.VodListVideoClassificationsRequest
	(*VodListSnapshotsRequest)(nil),                         // 34: Byteplus.Vod.Models.Request.VodListSnapshotsRequest
	(*VodGetFileListRequest)(nil),                           // 35: Byteplus.Vod.Models.Request.VodGetFileListRequest
	(*VodExtractMediaMetaTaskRequest)(nil),                  // 36: Byteplus.Vod.Models.Request.VodExtractMediaMetaTaskRequest
	(*VodStartWorkflowRequest)(nil),                         // 37: Byteplus.Vod.Models.Request.VodStartWorkflowRequest
	(*VodRetrieveTranscodeResultRequest)(nil),               // 38: Byteplus.Vod.Models.Request.VodRetrieveTranscodeResultRequest
	(*VodListWorkflowExecutionRequest)(nil),                 // 39: Byteplus.Vod.Models.Request.VodListWorkflowExecutionRequest
	(*VodGetWorkflowExecutionDetailRequest)(nil),            // 40: Byteplus.Vod.Models.Request.VodGetWorkflowExecutionDetailRequest
	(*VodGetWorkflowResultRequest)(nil),                     // 41: Byteplus.Vod.Models.Request.VodGetWorkflowResultRequest
	(*VodGetWorkflowExecutionStatusRequest)(nil),            // 42: Byteplus.Vod.Models.Request.VodGetWorkflowExecutionStatusRequest
	(*VodSubmitDirectEditTaskAsyncRequest)(nil),             // 43: Byteplus.Vod.Models.Request.VodSubmitDirectEditTaskAsyncRequest
	(*VodGetDirectEditResultRequest)(nil),                   // 44: Byteplus.Vod.Models.Request.VodGetDirectEditResultRequest
	(*VodGetDirectEditProgressRequest)(nil),                 // 45: Byteplus.Vod.Models.Request.VodGetDirectEditProgressRequest
	(*VodCreateSpaceRequest)(nil),                           // 46: Byteplus.Vod.Models.Request.VodCreateSpaceRequest
	(*VodGetSpaceDetailRequest)(nil),                        // 47: Byteplus.Vod.Models.Request.VodGetSpaceDetailRequest
	(*VodListSpaceRequest)(nil),                             // 48: Byteplus.Vod.Models.Request.VodListSpaceRequest
	(*VodUpdateSpaceRequest)(nil),                           // 49: Byteplus.Vod.Models.Request.VodUpdateSpaceRequest
	(*VodUpdateSpaceUploadConfigRequest)(nil),               // 50: Byteplus.Vod.Models.Request.VodUpdateSpaceUploadConfigRequest
	(*VodDescribeVodSpaceStorageDataRequest)(nil),           // 51: Byteplus.Vod.Models.Request.VodDescribeVodSpaceStorageDataRequest
	(*VodStartDomainRequest)(nil),                           // 52: Byteplus.Vod.Models.Request.VodStartDomainRequest
	(*VodStopDomainRequest)(nil),                            // 53: Byteplus.Vod.Models.Request.VodStopDomainRequest
	(*VodUpdateDomainPlayRuleRequestRequest)(nil),           // 54: Byteplus.Vod.Models.Request.VodUpdateDomainPlayRuleRequestRequest
	(*VodAddDomainToSchedulerRequest)(nil),                  // 55: Byteplus.Vod.Models.Request.VodAddDomainToSchedulerRequest
	(*VodRemoveDomainFromSchedulerRequest)(nil),             // 56: Byteplus.Vod.Models.Request.VodRemoveDomainFromSchedulerRequest
	(*VodListDomainRequest)(nil),                            // 57: Byteplus.Vod.Models.Request.VodListDomainRequest
	(*VodCreateCdnRefreshTaskRequest)(nil),                  // 58: Byteplus.Vod.Models.Request.VodCreateCdnRefreshTaskRequest
	(*VodCreateCdnPreloadTaskRequest)(nil),                  // 59: Byteplus.Vod.Models.Request.VodCreateCdnPreloadTaskRequest
	(*VodListCdnTasksRequest)(nil),                          // 60: Byteplus.Vod.Models.Request.VodListCdnTasksRequest
	(*VodListCdnAccessLogRequest)(nil),                      // 61: Byteplus.Vod.Models.Request.VodListCdnAccessLogRequest
	(*VodListCdnTopAccessUrlRequest)(nil),                   // 62: Byteplus.Vod.Models.Request.VodListCdnTopAccessUrlRequest
	(*VodListCdnTopAccessRequest)(nil),                      // 63: Byteplus.Vod.Models.Request.VodListCdnTopAccessRequest
	(*VodDescribeVodDomainBandwidthDataRequest)(nil),        // 64: Byteplus.Vod.Models.Request.VodDescribeVodDomainBandwidthDataRequest
	(*VodListCdnUsageDataRequest)(nil),                      // 65: Byteplus.Vod.Models.Request.VodListCdnUsageDataRequest
	(*VodListCdnUsageDataDetailRequest)(nil),                // 66: Byteplus.Vod.Models.Request.VodListCdnUsageDataDetailRequest
	(*VodListCdnStatusDataRequest)(nil),                     // 67: Byteplus.Vod.Models.Request.VodListCdnStatusDataRequest
	(*VodListCdnStatusDataDetailRequest)(nil),               // 68: Byteplus.Vod.Models.Request.VodListCdnStatusDataDetailRequest
	(*VodDescribeIPInfoRequest)(nil),                        // 69: Byteplus.Vod.Models.Request.VodDescribeIPInfoRequest
	(*VodListCdnPvDataRequest)(nil),                         // 70: Byteplus.Vod.Models.Request.VodListCdnPvDataRequest
	(*VodListCdnHitrateDataRequest)(nil),                    // 71: Byteplus.Vod.Models.Request.VodListCdnHitrateDataRequest
	(*VodDescribeVodDomainTrafficDataRequest)(nil),          // 72: Byteplus.Vod.Models.Request.VodDescribeVodDomainTrafficDataRequest
	(*VodSubmitBlockTasksRequest)(nil),                      // 73: Byteplus.Vod.Models.Request.VodSubmitBlockTasksRequest
	(*VodGetContentBlockTasksRequest)(nil),                  // 74: Byteplus.Vod.Models.Request.VodGetContentBlockTasksRequest
	(*VodCreateDomainV2Request)(nil),                        // 75: Byteplus.Vod.Models.Request.VodCreateDomainV2Request
	(*VodUpdateDomainExpireV2Request)(nil),                  // 76: Byteplus.Vod.Models.Request.VodUpdateDomainExpireV2Request
	(*VodUpdateDomainAuthConfigV2Request)(nil),              // 77: Byteplus.Vod.Models.Request.VodUpdateDomainAuthConfigV2Request
	(*AddOrUpdateCertificateV2Request)(nil),                 // 78: Byteplus.Vod.Models.Request.AddOrUpdateCertificateV2Request
	(*VodAddCallbackSubscriptionRequest)(nil),               // 79: Byteplus.Vod.Models.Request.VodAddCallbackSubscriptionRequest
	(*VodSetCallbackEventRequest)(nil),                      // 80: Byteplus.Vod.Models.Request.VodSetCallbackEventRequest
	(*VodGetSmartStrategyLitePlayInfoRequest)(nil),          // 81: Byteplus.Vod.Models.Request.VodGetSmartStrategyLitePlayInfoRequest
	(*VodGetAppInfoRequest)(nil),                            // 82: Byteplus.Vod.Models.Request.VodGetAppInfoRequest
	(*DescribeVodSpaceTranscodeDataRequest)(nil),            // 83: Byteplus.Vod.Models.Request.DescribeVodSpaceTranscodeDataRequest
	(*DescribeVodSpaceAIStatisDataRequest)(nil),             // 84: Byteplus.Vod.Models.Request.DescribeVodSpaceAIStatisDataRequest
	(*DescribeVodSpaceSubtitleStatisDataRequest)(nil),       // 85: Byteplus.Vod.Models.Request.DescribeVodSpaceSubtitleStatisDataRequest
	(*DescribeVodSpaceDetectStatisDataRequest)(nil),         // 86: Byteplus.Vod.Models.Request.DescribeVodSpaceDetectStatisDataRequest
	(*DescribeVodSnapshotDataRequest)(nil),                  // 87: Byteplus.Vod.Models.Request.DescribeVodSnapshotDataRequest
	(*DescribeVodSpaceWorkflowDetailDataRequest)(nil),       // 88: Byteplus.Vod.Models.Request.DescribeVodSpaceWorkflowDetailDataRequest
	(*DescribeVodSpaceEditDetailDataRequest)(nil),           // 89: Byteplus.Vod.Models.Request.DescribeVodSpaceEditDetailDataRequest
	(*DescribeVodPlayFileLogByDomainRequest)(nil),           // 90: Byteplus.Vod.Models.Request.DescribeVodPlayFileLogByDomainRequest
	(*DescribeVodSpaceStorageDataFDRequest)(nil),            // 91: Byteplus.Vod.Models.Request.DescribeVodSpaceStorageDataFDRequest
	(*DescribeVodEnhanceImageDataRequest)(nil),              // 92: Byteplus.Vod.Models.Request.DescribeVodEnhanceImageDataRequest
	(*DescribeVodPlayedStatisDataRequest)(nil),              // 93: Byteplus.Vod.Models.Request.DescribeVodPlayedStatisDataRequest
	(*DescribeVodMostPlayedStatisDataRequest)(nil),          // 94: Byteplus.Vod.Models.Request.DescribeVodMostPlayedStatisDataRequest
	(*DescribeVodRealtimeMediaDataRequest)(nil),             // 95: Byteplus.Vod.Models.Request.DescribeVodRealtimeMediaDataRequest
	(*VodSubmitBlockMediaTaskRequest)(nil),                  // 96: Byteplus.Vod.Models.Request.VodSubmitBlockMediaTaskRequest
	(*VodSubmitUnblockMediaTaskRequest)(nil),                // 97: Byteplus.Vod.Models.Request.VodSubmitUnblockMediaTaskRequest
	(*VodQueryMediaBlockStatusRequest)(nil),                 // 98: Byteplus.Vod.Models.Request.VodQueryMediaBlockStatusRequest
	(*VodCreatePlaylistRequest)(nil),                        // 99: Byteplus.Vod.Models.Request.VodCreatePlaylistRequest
	(*VodGetPlaylistsRequest)(nil),                          // 100: Byteplus.Vod.Models.Request.VodGetPlaylistsRequest
	(*VodUpdatePlaylistRequest)(nil),                        // 101: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest
	(*VodDeletePlaylistRequest)(nil),                        // 102: Byteplus.Vod.Models.Request.VodDeletePlaylistRequest
	(*VodSetIntertrustApiKeyRequest)(nil),                   // 103: Byteplus.Vod.Models.Request.VodSetIntertrustApiKeyRequest
	(*VodGetIntertrustApiKeyRequest)(nil),                   // 104: Byteplus.Vod.Models.Request.VodGetIntertrustApiKeyRequest
	(*VodDeleteIntertrustApiKeyRequest)(nil),                // 105: Byteplus.Vod.Models.Request.VodDeleteIntertrustApiKeyRequest
	(*VodSetFairPlayCertInfoRequest)(nil),                   // 106: Byteplus.Vod.Models.Request.VodSetFairPlayCertInfoRequest
	(*VodGetFairPlayCertInfoRequest)(nil),                   // 107: Byteplus.Vod.Models.Request.VodGetFairPlayCertInfoRequest
	(*VodDeleteFairPlayCertInfoRequest)(nil),                // 108: Byteplus.Vod.Models.Request.VodDeleteFairPlayCertInfoRequest
	(*VodGetFairPlayCertRequest)(nil),                       // 109: Byteplus.Vod.Models.Request.VodGetFairPlayCertRequest
	(*VodGetDrmLicenseRequest)(nil),                         // 110: Byteplus.Vod.Models.Request.VodGetDrmLicenseRequest
	(*VodSetMirrorSrcRuleRequest)(nil),                      // 111: Byteplus.Vod.Models.Request.VodSetMirrorSrcRuleRequest
	(*VodDeleteMirrorSrcRuleRequest)(nil),                   // 112: Byteplus.Vod.Models.Request.VodDeleteMirrorSrcRuleRequest
	(*VodListMirrorSrcRuleRequest)(nil),                     // 113: Byteplus.Vod.Models.Request.VodListMirrorSrcRuleRequest
	(*VodListProjectsRequest)(nil),                          // 114: Byteplus.Vod.Models.Request.VodListProjectsRequest
	(*business.VodUrlUploadURLSet)(nil),                     // 115: Byteplus.Vod.Models.Business.VodUrlUploadURLSet
	(*wrapperspb.StringValue)(nil),                          // 116: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                           // 117: google.protobuf.Int64Value
	(*business.WorkflowParams)(nil),                         // 118: Byteplus.Vod.Models.Business.WorkflowParams
	(*business.DirectUrl)(nil),                              // 119: Byteplus.Vod.Models.Business.DirectUrl
	(*business.MirrorSrcRule)(nil),                          // 120: Byteplus.Vod.Models.Business.MirrorSrcRule
}
var file_byteplus_vod_request_request_vod_proto_depIdxs = []int32{
	115, // 0: Byteplus.Vod.Models.Request.VodUrlUploadRequest.URLSets:type_name -> Byteplus.Vod.Models.Business.VodUrlUploadURLSet
	116, // 1: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest.PosterUri:type_name -> google.protobuf.StringValue
	116, // 2: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest.Title:type_name -> google.protobuf.StringValue
	116, // 3: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest.Description:type_name -> google.protobuf.StringValue
	116, // 4: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest.Tags:type_name -> google.protobuf.StringValue
	117, // 5: Byteplus.Vod.Models.Request.VodUpdateMediaInfoRequest.ClassificationId:type_name -> google.protobuf.Int64Value
	116, // 6: Byteplus.Vod.Models.Request.VodUpdateSubtitleInfoRequest.Title:type_name -> google.protobuf.StringValue
	116, // 7: Byteplus.Vod.Models.Request.VodUpdateSubtitleInfoRequest.Tag:type_name -> google.protobuf.StringValue
	118, // 8: Byteplus.Vod.Models.Request.VodStartWorkflowRequest.Input:type_name -> Byteplus.Vod.Models.Business.WorkflowParams
	119, // 9: Byteplus.Vod.Models.Request.VodStartWorkflowRequest.DirectUrl:type_name -> Byteplus.Vod.Models.Business.DirectUrl
	116, // 10: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Name:type_name -> google.protobuf.StringValue
	116, // 11: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Format:type_name -> google.protobuf.StringValue
	116, // 12: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Codec:type_name -> google.protobuf.StringValue
	116, // 13: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Definition:type_name -> google.protobuf.StringValue
	116, // 14: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Vids:type_name -> google.protobuf.StringValue
	116, // 15: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.StartTime:type_name -> google.protobuf.StringValue
	116, // 16: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.EndTime:type_name -> google.protobuf.StringValue
	116, // 17: Byteplus.Vod.Models.Request.VodUpdatePlaylistRequest.Cycles:type_name -> google.protobuf.StringValue
	116, // 18: Byteplus.Vod.Models.Request.VodSetMirrorSrcRuleRequest.Id:type_name -> google.protobuf.StringValue
	120, // 19: Byteplus.Vod.Models.Request.VodSetMirrorSrcRuleRequest.MirrorSrcRule:type_name -> Byteplus.Vod.Models.Business.MirrorSrcRule
	20,  // [20:20] is the sub-list for method output_type
	20,  // [20:20] is the sub-list for method input_type
	20,  // [20:20] is the sub-list for extension type_name
	20,  // [20:20] is the sub-list for extension extendee
	0,   // [0:20] is the sub-list for field type_name
}

func init() { file_byteplus_vod_request_request_vod_proto_init() }
func file_byteplus_vod_request_request_vod_proto_init() {
	if File_byteplus_vod_request_request_vod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_vod_request_request_vod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAllPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPrivateDrmPlayAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetHlsDecryptionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateHlsDecryptionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoWithLiveTimeShiftSceneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUrlUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodQueryUploadTaskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodApplyUploadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUploadMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUploadMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCommitUploadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUrlUploadJsonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetRecommendedPosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateMediaPublishStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateMediaStorageClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateMediaInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetMediaInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteTranscodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetMediaListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetSubtitleInfoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateSubtitleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateSubtitleInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAuditFramesForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetMLFramesForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetBetterFramesForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAudioInfoForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAutomaticSpeechRecognitionForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAudioEventDetectionForAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateVideoClassificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateVideoClassificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteVideoClassificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListVideoClassificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetFileListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodExtractMediaMetaTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStartWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodRetrieveTranscodeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetWorkflowExecutionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetWorkflowResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetWorkflowExecutionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubmitDirectEditTaskAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetDirectEditResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetDirectEditProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetSpaceDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateSpaceUploadConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeVodSpaceStorageDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStartDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStopDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateDomainPlayRuleRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAddDomainToSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodRemoveDomainFromSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateCdnRefreshTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateCdnPreloadTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnTopAccessUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnTopAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeVodDomainBandwidthDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnUsageDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnUsageDataDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnStatusDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnStatusDataDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeIPInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnPvDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnHitrateDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeVodDomainTrafficDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubmitBlockTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetContentBlockTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateDomainV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateDomainExpireV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdateDomainAuthConfigV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateCertificateV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAddCallbackSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSetCallbackEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetSmartStrategyLitePlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetAppInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceTranscodeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceAIStatisDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceSubtitleStatisDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceDetectStatisDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSnapshotDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceWorkflowDetailDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceEditDetailDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodPlayFileLogByDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodSpaceStorageDataFDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodEnhanceImageDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodPlayedStatisDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodMostPlayedStatisDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVodRealtimeMediaDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubmitBlockMediaTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubmitUnblockMediaTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodQueryMediaBlockStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreatePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlaylistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUpdatePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeletePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSetIntertrustApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetIntertrustApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteIntertrustApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSetFairPlayCertInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetFairPlayCertInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteFairPlayCertInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetFairPlayCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetDrmLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSetMirrorSrcRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDeleteMirrorSrcRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListMirrorSrcRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_vod_request_request_vod_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_vod_request_request_vod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_byteplus_vod_request_request_vod_proto_goTypes,
		DependencyIndexes: file_byteplus_vod_request_request_vod_proto_depIdxs,
		MessageInfos:      file_byteplus_vod_request_request_vod_proto_msgTypes,
	}.Build()
	File_byteplus_vod_request_request_vod_proto = out.File
	file_byteplus_vod_request_request_vod_proto_rawDesc = nil
	file_byteplus_vod_request_request_vod_proto_goTypes = nil
	file_byteplus_vod_request_request_vod_proto_depIdxs = nil
}
